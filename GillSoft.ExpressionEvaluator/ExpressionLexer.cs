//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ..\Grammar\Expression.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace GillSoft.ExpressionEvaluator {
using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class ExpressionLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, CONST=2, INTEGER=3, DECIMAL=4, IDENT=5, LPAREN=6, RPAREN=7, MULT=8, 
		DIV=9, ADD=10, SUB=11, POW=12, WS=13;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "CONST", "INTEGER", "DECIMAL", "IDENT", "LPAREN", "RPAREN", "MULT", 
		"DIV", "ADD", "SUB", "POW", "WS"
	};


	public ExpressionLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "','", null, null, null, null, "'('", "')'", "'*'", "'/'", "'+'", 
		"'-'", "'^'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "CONST", "INTEGER", "DECIMAL", "IDENT", "LPAREN", "RPAREN", 
		"MULT", "DIV", "ADD", "SUB", "POW", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Expression.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static ExpressionLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2\xF");
		sb.Append("O\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x4\xE\t\xE\x3\x2\x3\x2\x3\x3\x3\x3\x5\x3\"\n\x3\x3\x4\x6");
		sb.Append("\x4%\n\x4\r\x4\xE\x4&\x3\x5\x6\x5*\n\x5\r\x5\xE\x5+\x3\x5\x3");
		sb.Append("\x5\x6\x5\x30\n\x5\r\x5\xE\x5\x31\x3\x6\x3\x6\a\x6\x36\n\x6");
		sb.Append("\f\x6\xE\x6\x39\v\x6\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n");
		sb.Append("\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\xE\x6\xEJ\n\xE\r\xE\xE\xE");
		sb.Append("K\x3\xE\x3\xE\x2\x2\xF\x3\x3\x5\x4\a\x5\t\x6\v\a\r\b\xF\t\x11");
		sb.Append("\n\x13\v\x15\f\x17\r\x19\xE\x1B\xF\x3\x2\x6\x3\x2\x32;\x6\x2");
		sb.Append("%%\x43\\\x61\x61\x63|\b\x2%%\x30\x30\x32;\x43\\\x61\x61\x63");
		sb.Append("|\x5\x2\v\f\xE\xF\"\"T\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2");
		sb.Append("\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2");
		sb.Append("\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2");
		sb.Append("\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2");
		sb.Append("\x2\x1B\x3\x2\x2\x2\x3\x1D\x3\x2\x2\x2\x5!\x3\x2\x2\x2\a$\x3");
		sb.Append("\x2\x2\x2\t)\x3\x2\x2\x2\v\x33\x3\x2\x2\x2\r:\x3\x2\x2\x2\xF");
		sb.Append("<\x3\x2\x2\x2\x11>\x3\x2\x2\x2\x13@\x3\x2\x2\x2\x15\x42\x3\x2");
		sb.Append("\x2\x2\x17\x44\x3\x2\x2\x2\x19\x46\x3\x2\x2\x2\x1BI\x3\x2\x2");
		sb.Append("\x2\x1D\x1E\a.\x2\x2\x1E\x4\x3\x2\x2\x2\x1F\"\x5\a\x4\x2 \"");
		sb.Append("\x5\t\x5\x2!\x1F\x3\x2\x2\x2! \x3\x2\x2\x2\"\x6\x3\x2\x2\x2");
		sb.Append("#%\t\x2\x2\x2$#\x3\x2\x2\x2%&\x3\x2\x2\x2&$\x3\x2\x2\x2&\'\x3");
		sb.Append("\x2\x2\x2\'\b\x3\x2\x2\x2(*\t\x2\x2\x2)(\x3\x2\x2\x2*+\x3\x2");
		sb.Append("\x2\x2+)\x3\x2\x2\x2+,\x3\x2\x2\x2,-\x3\x2\x2\x2-/\a\x30\x2");
		sb.Append("\x2.\x30\t\x2\x2\x2/.\x3\x2\x2\x2\x30\x31\x3\x2\x2\x2\x31/\x3");
		sb.Append("\x2\x2\x2\x31\x32\x3\x2\x2\x2\x32\n\x3\x2\x2\x2\x33\x37\t\x3");
		sb.Append("\x2\x2\x34\x36\t\x4\x2\x2\x35\x34\x3\x2\x2\x2\x36\x39\x3\x2");
		sb.Append("\x2\x2\x37\x35\x3\x2\x2\x2\x37\x38\x3\x2\x2\x2\x38\f\x3\x2\x2");
		sb.Append("\x2\x39\x37\x3\x2\x2\x2:;\a*\x2\x2;\xE\x3\x2\x2\x2<=\a+\x2\x2");
		sb.Append("=\x10\x3\x2\x2\x2>?\a,\x2\x2?\x12\x3\x2\x2\x2@\x41\a\x31\x2");
		sb.Append("\x2\x41\x14\x3\x2\x2\x2\x42\x43\a-\x2\x2\x43\x16\x3\x2\x2\x2");
		sb.Append("\x44\x45\a/\x2\x2\x45\x18\x3\x2\x2\x2\x46G\a`\x2\x2G\x1A\x3");
		sb.Append("\x2\x2\x2HJ\t\x5\x2\x2IH\x3\x2\x2\x2JK\x3\x2\x2\x2KI\x3\x2\x2");
		sb.Append("\x2KL\x3\x2\x2\x2LM\x3\x2\x2\x2MN\b\xE\x2\x2N\x1C\x3\x2\x2\x2");
		sb.Append("\t\x2!&+\x31\x37K\x3\b\x2\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
} // namespace GillSoft.ExpressionEvaluator
