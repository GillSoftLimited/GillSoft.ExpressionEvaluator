//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ..\Grammar\Expression.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace GillSoft.ExpressionEvaluator {
using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class ExpressionLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, STRING=2, SINGLE_QUOTED_STRING=3, DOUBLE_QUOTED_STRING=4, CONST=5, 
		INTEGER=6, DECIMAL=7, IDENT=8, LPAREN=9, RPAREN=10, MULT=11, DIV=12, ADD=13, 
		SUB=14, POW=15, WS=16;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "STRING", "SINGLE_QUOTED_STRING", "DOUBLE_QUOTED_STRING", "CONST", 
		"INTEGER", "DECIMAL", "IDENT", "LPAREN", "RPAREN", "MULT", "DIV", "ADD", 
		"SUB", "POW", "WS"
	};


	public ExpressionLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "','", null, null, null, null, null, null, null, "'('", "')'", "'*'", 
		"'/'", "'+'", "'-'", "'^'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "STRING", "SINGLE_QUOTED_STRING", "DOUBLE_QUOTED_STRING", 
		"CONST", "INTEGER", "DECIMAL", "IDENT", "LPAREN", "RPAREN", "MULT", "DIV", 
		"ADD", "SUB", "POW", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Expression.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static ExpressionLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2\x12");
		sb.Append("k\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x3\x2\x3");
		sb.Append("\x2\x3\x3\x3\x3\x5\x3(\n\x3\x3\x4\x3\x4\a\x4,\n\x4\f\x4\xE\x4");
		sb.Append("/\v\x4\x3\x4\x3\x4\x3\x5\x3\x5\a\x5\x35\n\x5\f\x5\xE\x5\x38");
		sb.Append("\v\x5\x3\x5\x3\x5\x3\x6\x3\x6\x5\x6>\n\x6\x3\a\x6\a\x41\n\a");
		sb.Append("\r\a\xE\a\x42\x3\b\x6\b\x46\n\b\r\b\xE\bG\x3\b\x3\b\x6\bL\n");
		sb.Append("\b\r\b\xE\bM\x3\t\x3\t\a\tR\n\t\f\t\xE\tU\v\t\x3\n\x3\n\x3\v");
		sb.Append("\x3\v\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3");
		sb.Append("\x10\x3\x11\x6\x11\x66\n\x11\r\x11\xE\x11g\x3\x11\x3\x11\x2");
		sb.Append("\x2\x12\x3\x3\x5\x4\a\x5\t\x6\v\a\r\b\xF\t\x11\n\x13\v\x15\f");
		sb.Append("\x17\r\x19\xE\x1B\xF\x1D\x10\x1F\x11!\x12\x3\x2\b\x5\x2\f\f");
		sb.Append("\xF\xF))\x5\x2\f\f\xF\xF$$\x3\x2\x32;\x6\x2%%\x43\\\x61\x61");
		sb.Append("\x63|\b\x2%%\x30\x30\x32;\x43\\\x61\x61\x63|\x5\x2\v\f\xE\xF");
		sb.Append("\"\"s\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2");
		sb.Append("\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2");
		sb.Append("\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2");
		sb.Append("\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2");
		sb.Append("\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x3#\x3");
		sb.Append("\x2\x2\x2\x5\'\x3\x2\x2\x2\a)\x3\x2\x2\x2\t\x32\x3\x2\x2\x2");
		sb.Append("\v=\x3\x2\x2\x2\r@\x3\x2\x2\x2\xF\x45\x3\x2\x2\x2\x11O\x3\x2");
		sb.Append("\x2\x2\x13V\x3\x2\x2\x2\x15X\x3\x2\x2\x2\x17Z\x3\x2\x2\x2\x19");
		sb.Append("\\\x3\x2\x2\x2\x1B^\x3\x2\x2\x2\x1D`\x3\x2\x2\x2\x1F\x62\x3");
		sb.Append("\x2\x2\x2!\x65\x3\x2\x2\x2#$\a.\x2\x2$\x4\x3\x2\x2\x2%(\x5\a");
		sb.Append("\x4\x2&(\x5\t\x5\x2\'%\x3\x2\x2\x2\'&\x3\x2\x2\x2(\x6\x3\x2");
		sb.Append("\x2\x2)-\a)\x2\x2*,\n\x2\x2\x2+*\x3\x2\x2\x2,/\x3\x2\x2\x2-");
		sb.Append("+\x3\x2\x2\x2-.\x3\x2\x2\x2.\x30\x3\x2\x2\x2/-\x3\x2\x2\x2\x30");
		sb.Append("\x31\a)\x2\x2\x31\b\x3\x2\x2\x2\x32\x36\a$\x2\x2\x33\x35\n\x3");
		sb.Append("\x2\x2\x34\x33\x3\x2\x2\x2\x35\x38\x3\x2\x2\x2\x36\x34\x3\x2");
		sb.Append("\x2\x2\x36\x37\x3\x2\x2\x2\x37\x39\x3\x2\x2\x2\x38\x36\x3\x2");
		sb.Append("\x2\x2\x39:\a$\x2\x2:\n\x3\x2\x2\x2;>\x5\r\a\x2<>\x5\xF\b\x2");
		sb.Append("=;\x3\x2\x2\x2=<\x3\x2\x2\x2>\f\x3\x2\x2\x2?\x41\t\x4\x2\x2");
		sb.Append("@?\x3\x2\x2\x2\x41\x42\x3\x2\x2\x2\x42@\x3\x2\x2\x2\x42\x43");
		sb.Append("\x3\x2\x2\x2\x43\xE\x3\x2\x2\x2\x44\x46\t\x4\x2\x2\x45\x44\x3");
		sb.Append("\x2\x2\x2\x46G\x3\x2\x2\x2G\x45\x3\x2\x2\x2GH\x3\x2\x2\x2HI");
		sb.Append("\x3\x2\x2\x2IK\a\x30\x2\x2JL\t\x4\x2\x2KJ\x3\x2\x2\x2LM\x3\x2");
		sb.Append("\x2\x2MK\x3\x2\x2\x2MN\x3\x2\x2\x2N\x10\x3\x2\x2\x2OS\t\x5\x2");
		sb.Append("\x2PR\t\x6\x2\x2QP\x3\x2\x2\x2RU\x3\x2\x2\x2SQ\x3\x2\x2\x2S");
		sb.Append("T\x3\x2\x2\x2T\x12\x3\x2\x2\x2US\x3\x2\x2\x2VW\a*\x2\x2W\x14");
		sb.Append("\x3\x2\x2\x2XY\a+\x2\x2Y\x16\x3\x2\x2\x2Z[\a,\x2\x2[\x18\x3");
		sb.Append("\x2\x2\x2\\]\a\x31\x2\x2]\x1A\x3\x2\x2\x2^_\a-\x2\x2_\x1C\x3");
		sb.Append("\x2\x2\x2`\x61\a/\x2\x2\x61\x1E\x3\x2\x2\x2\x62\x63\a`\x2\x2");
		sb.Append("\x63 \x3\x2\x2\x2\x64\x66\t\a\x2\x2\x65\x64\x3\x2\x2\x2\x66");
		sb.Append("g\x3\x2\x2\x2g\x65\x3\x2\x2\x2gh\x3\x2\x2\x2hi\x3\x2\x2\x2i");
		sb.Append("j\b\x11\x2\x2j\"\x3\x2\x2\x2\f\x2\'-\x36=\x42GMSg\x3\b\x2\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
} // namespace GillSoft.ExpressionEvaluator
