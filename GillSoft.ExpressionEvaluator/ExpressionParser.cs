//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ..\Grammar\Expression.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace GillSoft.ExpressionEvaluator {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class ExpressionParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, STRING=2, SINGLE_QUOTED_STRING=3, DOUBLE_QUOTED_STRING=4, CONST=5, 
		INTEGER=6, DECIMAL=7, IDENT=8, LPAREN=9, RPAREN=10, MULT=11, DIV=12, ADD=13, 
		SUB=14, POW=15, WS=16;
	public const int
		RULE_expression = 0, RULE_subExpresion = 1, RULE_function = 2;
	public static readonly string[] ruleNames = {
		"expression", "subExpresion", "function"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", null, null, null, null, null, null, null, "'('", "')'", "'*'", 
		"'/'", "'+'", "'-'", "'^'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "STRING", "SINGLE_QUOTED_STRING", "DOUBLE_QUOTED_STRING", 
		"CONST", "INTEGER", "DECIMAL", "IDENT", "LPAREN", "RPAREN", "MULT", "DIV", 
		"ADD", "SUB", "POW", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Expression.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static ExpressionParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

	public ExpressionParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext left;
		public IToken sign;
		public IToken value;
		public IToken op;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SubExpresionContext subExpresion() {
			return GetRuleContext<SubExpresionContext>(0);
		}
		public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public ITerminalNode IDENT() { return GetToken(ExpressionParser.IDENT, 0); }
		public ITerminalNode CONST() { return GetToken(ExpressionParser.CONST, 0); }
		public ITerminalNode STRING() { return GetToken(ExpressionParser.STRING, 0); }
		public ITerminalNode POW() { return GetToken(ExpressionParser.POW, 0); }
		public ITerminalNode MULT() { return GetToken(ExpressionParser.MULT, 0); }
		public ITerminalNode DIV() { return GetToken(ExpressionParser.DIV, 0); }
		public ITerminalNode ADD() { return GetToken(ExpressionParser.ADD, 0); }
		public ITerminalNode SUB() { return GetToken(ExpressionParser.SUB, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 0;
		EnterRecursionRule(_localctx, 0, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 12;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				State = 7;
				_localctx.sign = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ADD || _la==SUB) ) {
					_localctx.sign = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8; expression(7);
				}
				break;
			case 2:
				{
				State = 9; subExpresion();
				}
				break;
			case 3:
				{
				State = 10; function();
				}
				break;
			case 4:
				{
				State = 11;
				_localctx.value = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING) | (1L << CONST) | (1L << IDENT))) != 0)) ) {
					_localctx.value = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 25;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 23;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 14;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 15; _localctx.op = Match(POW);
						State = 16; _localctx.right = expression(6);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 17;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 18;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==MULT || _la==DIV) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 19; _localctx.right = expression(5);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 20;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 21;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ADD || _la==SUB) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 22; _localctx.right = expression(4);
						}
						break;
					}
					} 
				}
				State = 27;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SubExpresionContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(ExpressionParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(ExpressionParser.RPAREN, 0); }
		public SubExpresionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subExpresion; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubExpresion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubExpresionContext subExpresion() {
		SubExpresionContext _localctx = new SubExpresionContext(Context, State);
		EnterRule(_localctx, 2, RULE_subExpresion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28; Match(LPAREN);
			State = 29; expression(0);
			State = 30; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public IToken name;
		public ExpressionContext paramFirst;
		public ExpressionContext _expression;
		public IList<ExpressionContext> _paramRest = new List<ExpressionContext>();
		public ITerminalNode LPAREN() { return GetToken(ExpressionParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(ExpressionParser.RPAREN, 0); }
		public ITerminalNode IDENT() { return GetToken(ExpressionParser.IDENT, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 4, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32; _localctx.name = Match(IDENT);
			State = 33; Match(LPAREN);
			State = 34; _localctx.paramFirst = expression(0);
			State = 39;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 35; Match(T__0);
				State = 36; _localctx._expression = expression(0);
				_localctx._paramRest.Add(_localctx._expression);
				}
				}
				State = 41;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 42; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 0: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		}
		return true;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x12");
		sb.Append("/\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x3\x2\x3\x2\x3\x2\x3\x2\x3");
		sb.Append("\x2\x3\x2\x5\x2\xF\n\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2");
		sb.Append("\x3\x2\x3\x2\x3\x2\a\x2\x1A\n\x2\f\x2\xE\x2\x1D\v\x2\x3\x3\x3");
		sb.Append("\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\a\x4(\n\x4\f\x4");
		sb.Append("\xE\x4+\v\x4\x3\x4\x3\x4\x3\x4\x2\x3\x2\x5\x2\x4\x6\x2\x5\x3");
		sb.Append("\x2\xF\x10\x5\x2\x4\x4\a\a\n\n\x3\x2\r\xE\x32\x2\xE\x3\x2\x2");
		sb.Append("\x2\x4\x1E\x3\x2\x2\x2\x6\"\x3\x2\x2\x2\b\t\b\x2\x1\x2\t\n\t");
		sb.Append("\x2\x2\x2\n\xF\x5\x2\x2\t\v\xF\x5\x4\x3\x2\f\xF\x5\x6\x4\x2");
		sb.Append("\r\xF\t\x3\x2\x2\xE\b\x3\x2\x2\x2\xE\v\x3\x2\x2\x2\xE\f\x3\x2");
		sb.Append("\x2\x2\xE\r\x3\x2\x2\x2\xF\x1B\x3\x2\x2\x2\x10\x11\f\a\x2\x2");
		sb.Append("\x11\x12\a\x11\x2\x2\x12\x1A\x5\x2\x2\b\x13\x14\f\x6\x2\x2\x14");
		sb.Append("\x15\t\x4\x2\x2\x15\x1A\x5\x2\x2\a\x16\x17\f\x5\x2\x2\x17\x18");
		sb.Append("\t\x2\x2\x2\x18\x1A\x5\x2\x2\x6\x19\x10\x3\x2\x2\x2\x19\x13");
		sb.Append("\x3\x2\x2\x2\x19\x16\x3\x2\x2\x2\x1A\x1D\x3\x2\x2\x2\x1B\x19");
		sb.Append("\x3\x2\x2\x2\x1B\x1C\x3\x2\x2\x2\x1C\x3\x3\x2\x2\x2\x1D\x1B");
		sb.Append("\x3\x2\x2\x2\x1E\x1F\a\v\x2\x2\x1F \x5\x2\x2\x2 !\a\f\x2\x2");
		sb.Append("!\x5\x3\x2\x2\x2\"#\a\n\x2\x2#$\a\v\x2\x2$)\x5\x2\x2\x2%&\a");
		sb.Append("\x3\x2\x2&(\x5\x2\x2\x2\'%\x3\x2\x2\x2(+\x3\x2\x2\x2)\'\x3\x2");
		sb.Append("\x2\x2)*\x3\x2\x2\x2*,\x3\x2\x2\x2+)\x3\x2\x2\x2,-\a\f\x2\x2");
		sb.Append("-\a\x3\x2\x2\x2\x6\xE\x19\x1B)");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
} // namespace GillSoft.ExpressionEvaluator
