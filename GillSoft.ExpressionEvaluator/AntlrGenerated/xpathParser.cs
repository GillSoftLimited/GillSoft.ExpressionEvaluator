//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ..\Grammar\xpath.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace GillSoft.ExpressionEvaluator {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class xpathParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INTEGER=1, DECIMAL=2, IDENT=3, PATHSEP=4, ABRPATH=5, LPAR=6, RPAR=7, LBRAC=8, 
		RBRAC=9, MINUS=10, PLUS=11, DOT=12, MUL=13, DOTDOT=14, AT=15, COMMA=16, 
		PIPE=17, LESS=18, MORE_=19, EQ=20, LE=21, GE=22, COLON=23, CC=24, APOS=25, 
		QUOT=26, STRING=27, Whitespace=28;
	public const int
		RULE_path = 0, RULE_pathElement = 1, RULE_filter = 2, RULE_attribute = 3, 
		RULE_element = 4;
	public static readonly string[] ruleNames = {
		"path", "pathElement", "filter", "attribute", "element"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'/'", "'//'", "'('", "')'", "'['", "']'", "'-'", 
		"'+'", "'.'", "'*'", "'..'", "'@'", "','", "'|'", "'<'", "'>'", null, 
		"'<='", "'>='", "':'", "'::'", "'''", "'\"'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INTEGER", "DECIMAL", "IDENT", "PATHSEP", "ABRPATH", "LPAR", "RPAR", 
		"LBRAC", "RBRAC", "MINUS", "PLUS", "DOT", "MUL", "DOTDOT", "AT", "COMMA", 
		"PIPE", "LESS", "MORE_", "EQ", "LE", "GE", "COLON", "CC", "APOS", "QUOT", 
		"STRING", "Whitespace"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "xpath.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static xpathParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

	public xpathParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class PathContext : ParserRuleContext {
		public PathElementContext[] pathElement() {
			return GetRuleContexts<PathElementContext>();
		}
		public PathElementContext pathElement(int i) {
			return GetRuleContext<PathElementContext>(i);
		}
		public PathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_path; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxpathVisitor<TResult> typedVisitor = visitor as IxpathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PathContext path() {
		PathContext _localctx = new PathContext(Context, State);
		EnterRule(_localctx, 0, RULE_path);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 10; pathElement();
				}
				}
				State = 13;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==PATHSEP );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathElementContext : ParserRuleContext {
		public ElementContext element() {
			return GetRuleContext<ElementContext>(0);
		}
		public ITerminalNode[] PATHSEP() { return GetTokens(xpathParser.PATHSEP); }
		public ITerminalNode PATHSEP(int i) {
			return GetToken(xpathParser.PATHSEP, i);
		}
		public PathElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pathElement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxpathVisitor<TResult> typedVisitor = visitor as IxpathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPathElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PathElementContext pathElement() {
		PathElementContext _localctx = new PathElementContext(Context, State);
		EnterRule(_localctx, 2, RULE_pathElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 18;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 15; Match(PATHSEP);
				}
				break;
			case 2:
				{
				State = 16; Match(PATHSEP);
				State = 17; Match(PATHSEP);
				}
				break;
			}
			State = 20; element();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterContext : ParserRuleContext {
		public AttributeContext attr;
		public IToken value;
		public ITerminalNode LBRAC() { return GetToken(xpathParser.LBRAC, 0); }
		public ITerminalNode EQ() { return GetToken(xpathParser.EQ, 0); }
		public ITerminalNode RBRAC() { return GetToken(xpathParser.RBRAC, 0); }
		public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(xpathParser.STRING, 0); }
		public FilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxpathVisitor<TResult> typedVisitor = visitor as IxpathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterContext filter() {
		FilterContext _localctx = new FilterContext(Context, State);
		EnterRule(_localctx, 4, RULE_filter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 22; Match(LBRAC);
			State = 23; _localctx.attr = attribute();
			State = 24; Match(EQ);
			State = 25; _localctx.value = Match(STRING);
			State = 26; Match(RBRAC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public IToken ns;
		public IToken name;
		public ITerminalNode AT() { return GetToken(xpathParser.AT, 0); }
		public ITerminalNode COLON() { return GetToken(xpathParser.COLON, 0); }
		public ITerminalNode[] IDENT() { return GetTokens(xpathParser.IDENT); }
		public ITerminalNode IDENT(int i) {
			return GetToken(xpathParser.IDENT, i);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxpathVisitor<TResult> typedVisitor = visitor as IxpathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 6, RULE_attribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28; Match(AT);
			State = 33;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				{
				State = 29; _localctx.ns = Match(IDENT);
				State = 30; Match(COLON);
				State = 31; _localctx.name = Match(IDENT);
				}
				}
				break;
			case 2:
				{
				{
				State = 32; _localctx.name = Match(IDENT);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		public IToken ns;
		public IToken name;
		public FilterContext filter() {
			return GetRuleContext<FilterContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(xpathParser.COLON, 0); }
		public ITerminalNode[] IDENT() { return GetTokens(xpathParser.IDENT); }
		public ITerminalNode IDENT(int i) {
			return GetToken(xpathParser.IDENT, i);
		}
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxpathVisitor<TResult> typedVisitor = visitor as IxpathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 8, RULE_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				{
				State = 35; _localctx.ns = Match(IDENT);
				State = 36; Match(COLON);
				State = 37; _localctx.name = Match(IDENT);
				}
				}
				break;
			case 2:
				{
				{
				State = 38; _localctx.name = Match(IDENT);
				}
				}
				break;
			}
			State = 42;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRAC) {
				{
				State = 41; filter();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x1E");
		sb.Append("/\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x3");
		sb.Append("\x2\x6\x2\xE\n\x2\r\x2\xE\x2\xF\x3\x3\x3\x3\x3\x3\x5\x3\x15");
		sb.Append("\n\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5");
		sb.Append("\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5$\n\x5\x3\x6\x3\x6\x3\x6\x3\x6");
		sb.Append("\x5\x6*\n\x6\x3\x6\x5\x6-\n\x6\x3\x6\x2\x2\a\x2\x4\x6\b\n\x2");
		sb.Append("\x2.\x2\r\x3\x2\x2\x2\x4\x14\x3\x2\x2\x2\x6\x18\x3\x2\x2\x2");
		sb.Append("\b\x1E\x3\x2\x2\x2\n)\x3\x2\x2\x2\f\xE\x5\x4\x3\x2\r\f\x3\x2");
		sb.Append("\x2\x2\xE\xF\x3\x2\x2\x2\xF\r\x3\x2\x2\x2\xF\x10\x3\x2\x2\x2");
		sb.Append("\x10\x3\x3\x2\x2\x2\x11\x15\a\x6\x2\x2\x12\x13\a\x6\x2\x2\x13");
		sb.Append("\x15\a\x6\x2\x2\x14\x11\x3\x2\x2\x2\x14\x12\x3\x2\x2\x2\x15");
		sb.Append("\x16\x3\x2\x2\x2\x16\x17\x5\n\x6\x2\x17\x5\x3\x2\x2\x2\x18\x19");
		sb.Append("\a\n\x2\x2\x19\x1A\x5\b\x5\x2\x1A\x1B\a\x16\x2\x2\x1B\x1C\a");
		sb.Append("\x1D\x2\x2\x1C\x1D\a\v\x2\x2\x1D\a\x3\x2\x2\x2\x1E#\a\x11\x2");
		sb.Append("\x2\x1F \a\x5\x2\x2 !\a\x19\x2\x2!$\a\x5\x2\x2\"$\a\x5\x2\x2");
		sb.Append("#\x1F\x3\x2\x2\x2#\"\x3\x2\x2\x2$\t\x3\x2\x2\x2%&\a\x5\x2\x2");
		sb.Append("&\'\a\x19\x2\x2\'*\a\x5\x2\x2(*\a\x5\x2\x2)%\x3\x2\x2\x2)(\x3");
		sb.Append("\x2\x2\x2*,\x3\x2\x2\x2+-\x5\x6\x4\x2,+\x3\x2\x2\x2,-\x3\x2");
		sb.Append("\x2\x2-\v\x3\x2\x2\x2\a\xF\x14#),");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
} // namespace GillSoft.ExpressionEvaluator
