//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ..\Grammar\xpath.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace GillSoft.ExpressionEvaluator {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class xpathParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, AXIS=3, AXIS_ANCESTOR=4, AXIS_ANCESTOR_OR_SELF=5, AXIS_ATTRIBUTE=6, 
		AXIS_CHILD=7, AXIS_DESCENDANT=8, AXIS_DESCENDANT_OR_SELF=9, AXIS_FOLLOWING=10, 
		AXIS_NAMESPACE=11, AXIS_PARENT=12, AXIS_PRECEDING=13, AXIS_PRECEDING_SIBLING=14, 
		AXIS_FOLLOWNG_SUBLING=15, AXIS_SELF=16, IDENT=17, PATHSEP=18, LBRAC=19, 
		RBRAC=20, AT=21, EQ=22, COLON=23, COLONCOLON=24, Whitespace=25;
	public const int
		RULE_path = 0, RULE_pathElement = 1, RULE_filter = 2, RULE_axis = 3, RULE_namespacePrefix = 4, 
		RULE_attribute = 5, RULE_element = 6, RULE_string = 7, RULE_stringSingleQuote = 8, 
		RULE_stringDoubleQuote = 9;
	public static readonly string[] ruleNames = {
		"path", "pathElement", "filter", "axis", "namespacePrefix", "attribute", 
		"element", "string", "stringSingleQuote", "stringDoubleQuote"
	};

	private static readonly string[] _LiteralNames = {
		null, "'''", "'\"'", null, "'ancestor'", "'ancestor-or-self'", "'attribute'", 
		"'child'", "'descendant'", "'descendant-or-self'", "'following'", "'namespace'", 
		"'parent'", "'preceding'", "'preceding-sibling'", "'following-sibling'", 
		"'self'", null, "'/'", "'['", "']'", "'@'", null, "':'", "'::'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "AXIS", "AXIS_ANCESTOR", "AXIS_ANCESTOR_OR_SELF", "AXIS_ATTRIBUTE", 
		"AXIS_CHILD", "AXIS_DESCENDANT", "AXIS_DESCENDANT_OR_SELF", "AXIS_FOLLOWING", 
		"AXIS_NAMESPACE", "AXIS_PARENT", "AXIS_PRECEDING", "AXIS_PRECEDING_SIBLING", 
		"AXIS_FOLLOWNG_SUBLING", "AXIS_SELF", "IDENT", "PATHSEP", "LBRAC", "RBRAC", 
		"AT", "EQ", "COLON", "COLONCOLON", "Whitespace"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "xpath.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static xpathParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public xpathParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public xpathParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class PathContext : ParserRuleContext {
		public ITerminalNode[] PATHSEP() { return GetTokens(xpathParser.PATHSEP); }
		public ITerminalNode PATHSEP(int i) {
			return GetToken(xpathParser.PATHSEP, i);
		}
		public PathElementContext[] pathElement() {
			return GetRuleContexts<PathElementContext>();
		}
		public PathElementContext pathElement(int i) {
			return GetRuleContext<PathElementContext>(i);
		}
		public PathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_path; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxpathVisitor<TResult> typedVisitor = visitor as IxpathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PathContext path() {
		PathContext _localctx = new PathContext(Context, State);
		EnterRule(_localctx, 0, RULE_path);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 22;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 20; Match(PATHSEP);
				State = 21; pathElement();
				}
				}
				State = 24;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==PATHSEP );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathElementContext : ParserRuleContext {
		public ElementContext element() {
			return GetRuleContext<ElementContext>(0);
		}
		public AxisContext axis() {
			return GetRuleContext<AxisContext>(0);
		}
		public FilterContext filter() {
			return GetRuleContext<FilterContext>(0);
		}
		public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		public PathElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pathElement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxpathVisitor<TResult> typedVisitor = visitor as IxpathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPathElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PathElementContext pathElement() {
		PathElementContext _localctx = new PathElementContext(Context, State);
		EnterRule(_localctx, 2, RULE_pathElement);
		int _la;
		try {
			State = 34;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AXIS:
			case IDENT:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 27;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AXIS) {
					{
					State = 26; axis();
					}
				}

				State = 29; element();
				State = 31;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LBRAC) {
					{
					State = 30; filter();
					}
				}

				}
				}
				break;
			case AT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 33; attribute();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterContext : ParserRuleContext {
		public AttributeContext attr;
		public ElementContext elem;
		public StringContext value;
		public ITerminalNode LBRAC() { return GetToken(xpathParser.LBRAC, 0); }
		public ITerminalNode EQ() { return GetToken(xpathParser.EQ, 0); }
		public ITerminalNode RBRAC() { return GetToken(xpathParser.RBRAC, 0); }
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		public ElementContext element() {
			return GetRuleContext<ElementContext>(0);
		}
		public FilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxpathVisitor<TResult> typedVisitor = visitor as IxpathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterContext filter() {
		FilterContext _localctx = new FilterContext(Context, State);
		EnterRule(_localctx, 4, RULE_filter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36; Match(LBRAC);
			State = 39;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				{
				State = 37; _localctx.attr = attribute();
				}
				break;
			case IDENT:
				{
				State = 38; _localctx.elem = element();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 41; Match(EQ);
			State = 42; _localctx.value = @string();
			State = 43; Match(RBRAC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AxisContext : ParserRuleContext {
		public IToken name;
		public ITerminalNode COLONCOLON() { return GetToken(xpathParser.COLONCOLON, 0); }
		public ITerminalNode AXIS() { return GetToken(xpathParser.AXIS, 0); }
		public AxisContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_axis; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxpathVisitor<TResult> typedVisitor = visitor as IxpathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAxis(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AxisContext axis() {
		AxisContext _localctx = new AxisContext(Context, State);
		EnterRule(_localctx, 6, RULE_axis);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45; _localctx.name = Match(AXIS);
			State = 46; Match(COLONCOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespacePrefixContext : ParserRuleContext {
		public IToken name;
		public ITerminalNode IDENT() { return GetToken(xpathParser.IDENT, 0); }
		public NamespacePrefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespacePrefix; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxpathVisitor<TResult> typedVisitor = visitor as IxpathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespacePrefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespacePrefixContext namespacePrefix() {
		NamespacePrefixContext _localctx = new NamespacePrefixContext(Context, State);
		EnterRule(_localctx, 8, RULE_namespacePrefix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48; _localctx.name = Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public NamespacePrefixContext ns;
		public IToken name;
		public ITerminalNode AT() { return GetToken(xpathParser.AT, 0); }
		public ITerminalNode IDENT() { return GetToken(xpathParser.IDENT, 0); }
		public ITerminalNode COLON() { return GetToken(xpathParser.COLON, 0); }
		public NamespacePrefixContext namespacePrefix() {
			return GetRuleContext<NamespacePrefixContext>(0);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxpathVisitor<TResult> typedVisitor = visitor as IxpathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 10, RULE_attribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50; Match(AT);
			State = 54;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 51; _localctx.ns = namespacePrefix();
				State = 52; Match(COLON);
				}
				break;
			}
			State = 56; _localctx.name = Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		public NamespacePrefixContext ns;
		public IToken name;
		public ITerminalNode IDENT() { return GetToken(xpathParser.IDENT, 0); }
		public ITerminalNode COLON() { return GetToken(xpathParser.COLON, 0); }
		public NamespacePrefixContext namespacePrefix() {
			return GetRuleContext<NamespacePrefixContext>(0);
		}
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxpathVisitor<TResult> typedVisitor = visitor as IxpathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 12, RULE_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 58; _localctx.ns = namespacePrefix();
				State = 59; Match(COLON);
				}
				break;
			}
			State = 63; _localctx.name = Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public StringSingleQuoteContext stringSingleQuote() {
			return GetRuleContext<StringSingleQuoteContext>(0);
		}
		public StringDoubleQuoteContext stringDoubleQuote() {
			return GetRuleContext<StringDoubleQuoteContext>(0);
		}
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxpathVisitor<TResult> typedVisitor = visitor as IxpathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 14, RULE_string);
		try {
			State = 67;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 65; stringSingleQuote();
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 66; stringDoubleQuote();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringSingleQuoteContext : ParserRuleContext {
		public StringSingleQuoteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringSingleQuote; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxpathVisitor<TResult> typedVisitor = visitor as IxpathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringSingleQuote(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringSingleQuoteContext stringSingleQuote() {
		StringSingleQuoteContext _localctx = new StringSingleQuoteContext(Context, State);
		EnterRule(_localctx, 16, RULE_stringSingleQuote);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69; Match(T__0);
			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << AXIS) | (1L << AXIS_ANCESTOR) | (1L << AXIS_ANCESTOR_OR_SELF) | (1L << AXIS_ATTRIBUTE) | (1L << AXIS_CHILD) | (1L << AXIS_DESCENDANT) | (1L << AXIS_DESCENDANT_OR_SELF) | (1L << AXIS_FOLLOWING) | (1L << AXIS_NAMESPACE) | (1L << AXIS_PARENT) | (1L << AXIS_PRECEDING) | (1L << AXIS_PRECEDING_SIBLING) | (1L << AXIS_FOLLOWNG_SUBLING) | (1L << AXIS_SELF) | (1L << IDENT) | (1L << PATHSEP) | (1L << LBRAC) | (1L << RBRAC) | (1L << AT) | (1L << EQ) | (1L << COLON) | (1L << COLONCOLON) | (1L << Whitespace))) != 0)) {
				{
				{
				State = 70;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==T__0) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 75;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 76; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringDoubleQuoteContext : ParserRuleContext {
		public StringDoubleQuoteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringDoubleQuote; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxpathVisitor<TResult> typedVisitor = visitor as IxpathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringDoubleQuote(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringDoubleQuoteContext stringDoubleQuote() {
		StringDoubleQuoteContext _localctx = new StringDoubleQuoteContext(Context, State);
		EnterRule(_localctx, 18, RULE_stringDoubleQuote);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78; Match(T__1);
			State = 82;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << AXIS) | (1L << AXIS_ANCESTOR) | (1L << AXIS_ANCESTOR_OR_SELF) | (1L << AXIS_ATTRIBUTE) | (1L << AXIS_CHILD) | (1L << AXIS_DESCENDANT) | (1L << AXIS_DESCENDANT_OR_SELF) | (1L << AXIS_FOLLOWING) | (1L << AXIS_NAMESPACE) | (1L << AXIS_PARENT) | (1L << AXIS_PRECEDING) | (1L << AXIS_PRECEDING_SIBLING) | (1L << AXIS_FOLLOWNG_SUBLING) | (1L << AXIS_SELF) | (1L << IDENT) | (1L << PATHSEP) | (1L << LBRAC) | (1L << RBRAC) | (1L << AT) | (1L << EQ) | (1L << COLON) | (1L << COLONCOLON) | (1L << Whitespace))) != 0)) {
				{
				{
				State = 79;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==T__1) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 84;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 85; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1B', 'Z', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x3', '\x2', '\x3', '\x2', '\x6', '\x2', '\x19', '\n', '\x2', '\r', '\x2', 
		'\xE', '\x2', '\x1A', '\x3', '\x3', '\x5', '\x3', '\x1E', '\n', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\"', '\n', '\x3', '\x3', '\x3', 
		'\x5', '\x3', '%', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x5', '\x4', '*', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', 
		'\a', '\x39', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x5', '\b', '@', '\n', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\t', '\x3', '\t', '\x5', '\t', '\x46', '\n', '\t', '\x3', '\n', 
		'\x3', '\n', '\a', '\n', 'J', '\n', '\n', '\f', '\n', '\xE', '\n', 'M', 
		'\v', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\a', 
		'\v', 'S', '\n', '\v', '\f', '\v', '\xE', '\v', 'V', '\v', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x2', '\x2', '\f', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x2', '\x4', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x2', '\x4', '\x4', '\x2', 'Y', '\x2', '\x18', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '$', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'&', '\x3', '\x2', '\x2', '\x2', '\b', '/', '\x3', '\x2', '\x2', '\x2', 
		'\n', '\x32', '\x3', '\x2', '\x2', '\x2', '\f', '\x34', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '?', '\x3', '\x2', '\x2', '\x2', '\x10', '\x45', 
		'\x3', '\x2', '\x2', '\x2', '\x12', 'G', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'P', '\x3', '\x2', '\x2', '\x2', '\x16', '\x17', '\a', '\x14', '\x2', 
		'\x2', '\x17', '\x19', '\x5', '\x4', '\x3', '\x2', '\x18', '\x16', '\x3', 
		'\x2', '\x2', '\x2', '\x19', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\x18', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x1B', '\x3', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1E', '\x5', 
		'\b', '\x5', '\x2', '\x1D', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1D', 
		'\x1E', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\x1F', '!', '\x5', '\xE', '\b', '\x2', ' ', '\"', '\x5', '\x6', 
		'\x4', '\x2', '!', ' ', '\x3', '\x2', '\x2', '\x2', '!', '\"', '\x3', 
		'\x2', '\x2', '\x2', '\"', '%', '\x3', '\x2', '\x2', '\x2', '#', '%', 
		'\x5', '\f', '\a', '\x2', '$', '\x1D', '\x3', '\x2', '\x2', '\x2', '$', 
		'#', '\x3', '\x2', '\x2', '\x2', '%', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'&', ')', '\a', '\x15', '\x2', '\x2', '\'', '*', '\x5', '\f', '\a', '\x2', 
		'(', '*', '\x5', '\xE', '\b', '\x2', ')', '\'', '\x3', '\x2', '\x2', '\x2', 
		')', '(', '\x3', '\x2', '\x2', '\x2', '*', '+', '\x3', '\x2', '\x2', '\x2', 
		'+', ',', '\a', '\x18', '\x2', '\x2', ',', '-', '\x5', '\x10', '\t', '\x2', 
		'-', '.', '\a', '\x16', '\x2', '\x2', '.', '\a', '\x3', '\x2', '\x2', 
		'\x2', '/', '\x30', '\a', '\x5', '\x2', '\x2', '\x30', '\x31', '\a', '\x1A', 
		'\x2', '\x2', '\x31', '\t', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', 
		'\a', '\x13', '\x2', '\x2', '\x33', '\v', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x38', '\a', '\x17', '\x2', '\x2', '\x35', '\x36', '\x5', '\n', 
		'\x6', '\x2', '\x36', '\x37', '\a', '\x19', '\x2', '\x2', '\x37', '\x39', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x39', '\x3', '\x2', '\x2', '\x2', '\x39', ':', '\x3', '\x2', 
		'\x2', '\x2', ':', ';', '\a', '\x13', '\x2', '\x2', ';', '\r', '\x3', 
		'\x2', '\x2', '\x2', '<', '=', '\x5', '\n', '\x6', '\x2', '=', '>', '\a', 
		'\x19', '\x2', '\x2', '>', '@', '\x3', '\x2', '\x2', '\x2', '?', '<', 
		'\x3', '\x2', '\x2', '\x2', '?', '@', '\x3', '\x2', '\x2', '\x2', '@', 
		'\x41', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\a', '\x13', '\x2', 
		'\x2', '\x42', '\xF', '\x3', '\x2', '\x2', '\x2', '\x43', '\x46', '\x5', 
		'\x12', '\n', '\x2', '\x44', '\x46', '\x5', '\x14', '\v', '\x2', '\x45', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x45', '\x44', '\x3', '\x2', '\x2', 
		'\x2', '\x46', '\x11', '\x3', '\x2', '\x2', '\x2', 'G', 'K', '\a', '\x3', 
		'\x2', '\x2', 'H', 'J', '\n', '\x2', '\x2', '\x2', 'I', 'H', '\x3', '\x2', 
		'\x2', '\x2', 'J', 'M', '\x3', '\x2', '\x2', '\x2', 'K', 'I', '\x3', '\x2', 
		'\x2', '\x2', 'K', 'L', '\x3', '\x2', '\x2', '\x2', 'L', 'N', '\x3', '\x2', 
		'\x2', '\x2', 'M', 'K', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\a', '\x3', 
		'\x2', '\x2', 'O', '\x13', '\x3', '\x2', '\x2', '\x2', 'P', 'T', '\a', 
		'\x4', '\x2', '\x2', 'Q', 'S', '\n', '\x3', '\x2', '\x2', 'R', 'Q', '\x3', 
		'\x2', '\x2', '\x2', 'S', 'V', '\x3', '\x2', '\x2', '\x2', 'T', 'R', '\x3', 
		'\x2', '\x2', '\x2', 'T', 'U', '\x3', '\x2', '\x2', '\x2', 'U', 'W', '\x3', 
		'\x2', '\x2', '\x2', 'V', 'T', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\a', 
		'\x4', '\x2', '\x2', 'X', '\x15', '\x3', '\x2', '\x2', '\x2', '\f', '\x1A', 
		'\x1D', '!', '$', ')', '\x38', '?', '\x45', 'K', 'T',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace GillSoft.ExpressionEvaluator
