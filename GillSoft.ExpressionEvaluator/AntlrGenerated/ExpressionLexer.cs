//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ..\Grammar\Expression.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace GillSoft.ExpressionEvaluator {
using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class ExpressionLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, SINGLE_QUOTED_STRING=2, DOUBLE_QUOTED_STRING=3, CONST=4, INTEGER=5, 
		DECIMAL=6, TRUE=7, FALSE=8, IDENT=9, LPAREN=10, RPAREN=11, MULT=12, DIV=13, 
		PLUS=14, MINUS=15, POW=16, AND=17, OR=18, NOT=19, WS=20;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "SINGLE_QUOTED_STRING", "DOUBLE_QUOTED_STRING", "CONST", "INTEGER", 
		"DECIMAL", "TRUE", "FALSE", "IDENT", "LPAREN", "RPAREN", "MULT", "DIV", 
		"PLUS", "MINUS", "POW", "AND", "OR", "NOT", "WS"
	};


	public ExpressionLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "','", null, null, null, null, null, null, null, null, "'('", "')'", 
		"'*'", "'/'", "'+'", "'-'", "'^'", "'&&'", "'||'", "'!'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "SINGLE_QUOTED_STRING", "DOUBLE_QUOTED_STRING", "CONST", "INTEGER", 
		"DECIMAL", "TRUE", "FALSE", "IDENT", "LPAREN", "RPAREN", "MULT", "DIV", 
		"PLUS", "MINUS", "POW", "AND", "OR", "NOT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Expression.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static ExpressionLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2\x16");
		sb.Append("\x82\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6");
		sb.Append("\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f");
		sb.Append("\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4");
		sb.Append("\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x3\x2\x3\x2");
		sb.Append("\x3\x3\x3\x3\a\x3\x30\n\x3\f\x3\xE\x3\x33\v\x3\x3\x3\x3\x3\x3");
		sb.Append("\x4\x3\x4\a\x4\x39\n\x4\f\x4\xE\x4<\v\x4\x3\x4\x3\x4\x3\x5\x3");
		sb.Append("\x5\x5\x5\x42\n\x5\x3\x6\x6\x6\x45\n\x6\r\x6\xE\x6\x46\x3\a");
		sb.Append("\x6\aJ\n\a\r\a\xE\aK\x3\a\x3\a\x6\aP\n\a\r\a\xE\aQ\x3\b\x3\b");
		sb.Append("\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\a\n");
		sb.Append("\x61\n\n\f\n\xE\n\x64\v\n\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\xE");
		sb.Append("\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3\x12\x3\x12");
		sb.Append("\x3\x12\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x15\x6\x15}\n");
		sb.Append("\x15\r\x15\xE\x15~\x3\x15\x3\x15\x2\x2\x16\x3\x3\x5\x4\a\x5");
		sb.Append("\t\x6\v\a\r\b\xF\t\x11\n\x13\v\x15\f\x17\r\x19\xE\x1B\xF\x1D");
		sb.Append("\x10\x1F\x11!\x12#\x13%\x14\'\x15)\x16\x3\x2\x10\x5\x2\f\f\xF");
		sb.Append("\xF))\x5\x2\f\f\xF\xF$$\x3\x2\x32;\x4\x2VVvv\x4\x2TTtt\x4\x2");
		sb.Append("WWww\x4\x2GGgg\x4\x2HHhh\x4\x2\x43\x43\x63\x63\x4\x2NNnn\x4");
		sb.Append("\x2UUuu\x6\x2%%\x43\\\x61\x61\x63|\b\x2%%\x30\x30\x32;\x43\\");
		sb.Append("\x61\x61\x63|\x5\x2\v\f\xE\xF\"\"\x89\x2\x3\x3\x2\x2\x2\x2\x5");
		sb.Append("\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2");
		sb.Append("\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2");
		sb.Append("\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19");
		sb.Append("\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3");
		sb.Append("\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2");
		sb.Append("\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x3+\x3\x2\x2\x2\x5-\x3\x2\x2");
		sb.Append("\x2\a\x36\x3\x2\x2\x2\t\x41\x3\x2\x2\x2\v\x44\x3\x2\x2\x2\r");
		sb.Append("I\x3\x2\x2\x2\xFS\x3\x2\x2\x2\x11X\x3\x2\x2\x2\x13^\x3\x2\x2");
		sb.Append("\x2\x15\x65\x3\x2\x2\x2\x17g\x3\x2\x2\x2\x19i\x3\x2\x2\x2\x1B");
		sb.Append("k\x3\x2\x2\x2\x1Dm\x3\x2\x2\x2\x1Fo\x3\x2\x2\x2!q\x3\x2\x2\x2");
		sb.Append("#s\x3\x2\x2\x2%v\x3\x2\x2\x2\'y\x3\x2\x2\x2)|\x3\x2\x2\x2+,");
		sb.Append("\a.\x2\x2,\x4\x3\x2\x2\x2-\x31\a)\x2\x2.\x30\n\x2\x2\x2/.\x3");
		sb.Append("\x2\x2\x2\x30\x33\x3\x2\x2\x2\x31/\x3\x2\x2\x2\x31\x32\x3\x2");
		sb.Append("\x2\x2\x32\x34\x3\x2\x2\x2\x33\x31\x3\x2\x2\x2\x34\x35\a)\x2");
		sb.Append("\x2\x35\x6\x3\x2\x2\x2\x36:\a$\x2\x2\x37\x39\n\x3\x2\x2\x38");
		sb.Append("\x37\x3\x2\x2\x2\x39<\x3\x2\x2\x2:\x38\x3\x2\x2\x2:;\x3\x2\x2");
		sb.Append("\x2;=\x3\x2\x2\x2<:\x3\x2\x2\x2=>\a$\x2\x2>\b\x3\x2\x2\x2?\x42");
		sb.Append("\x5\v\x6\x2@\x42\x5\r\a\x2\x41?\x3\x2\x2\x2\x41@\x3\x2\x2\x2");
		sb.Append("\x42\n\x3\x2\x2\x2\x43\x45\t\x4\x2\x2\x44\x43\x3\x2\x2\x2\x45");
		sb.Append("\x46\x3\x2\x2\x2\x46\x44\x3\x2\x2\x2\x46G\x3\x2\x2\x2G\f\x3");
		sb.Append("\x2\x2\x2HJ\t\x4\x2\x2IH\x3\x2\x2\x2JK\x3\x2\x2\x2KI\x3\x2\x2");
		sb.Append("\x2KL\x3\x2\x2\x2LM\x3\x2\x2\x2MO\a\x30\x2\x2NP\t\x4\x2\x2O");
		sb.Append("N\x3\x2\x2\x2PQ\x3\x2\x2\x2QO\x3\x2\x2\x2QR\x3\x2\x2\x2R\xE");
		sb.Append("\x3\x2\x2\x2ST\t\x5\x2\x2TU\t\x6\x2\x2UV\t\a\x2\x2VW\t\b\x2");
		sb.Append("\x2W\x10\x3\x2\x2\x2XY\t\t\x2\x2YZ\t\n\x2\x2Z[\t\v\x2\x2[\\");
		sb.Append("\t\f\x2\x2\\]\t\b\x2\x2]\x12\x3\x2\x2\x2^\x62\t\r\x2\x2_\x61");
		sb.Append("\t\xE\x2\x2`_\x3\x2\x2\x2\x61\x64\x3\x2\x2\x2\x62`\x3\x2\x2");
		sb.Append("\x2\x62\x63\x3\x2\x2\x2\x63\x14\x3\x2\x2\x2\x64\x62\x3\x2\x2");
		sb.Append("\x2\x65\x66\a*\x2\x2\x66\x16\x3\x2\x2\x2gh\a+\x2\x2h\x18\x3");
		sb.Append("\x2\x2\x2ij\a,\x2\x2j\x1A\x3\x2\x2\x2kl\a\x31\x2\x2l\x1C\x3");
		sb.Append("\x2\x2\x2mn\a-\x2\x2n\x1E\x3\x2\x2\x2op\a/\x2\x2p \x3\x2\x2");
		sb.Append("\x2qr\a`\x2\x2r\"\x3\x2\x2\x2st\a(\x2\x2tu\a(\x2\x2u$\x3\x2");
		sb.Append("\x2\x2vw\a~\x2\x2wx\a~\x2\x2x&\x3\x2\x2\x2yz\a#\x2\x2z(\x3\x2");
		sb.Append("\x2\x2{}\t\xF\x2\x2|{\x3\x2\x2\x2}~\x3\x2\x2\x2~|\x3\x2\x2\x2");
		sb.Append("~\x7F\x3\x2\x2\x2\x7F\x80\x3\x2\x2\x2\x80\x81\b\x15\x2\x2\x81");
		sb.Append("*\x3\x2\x2\x2\v\x2\x31:\x41\x46KQ\x62~\x3\b\x2\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
} // namespace GillSoft.ExpressionEvaluator
