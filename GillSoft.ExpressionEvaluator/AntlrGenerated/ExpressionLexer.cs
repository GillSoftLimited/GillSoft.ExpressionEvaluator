//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ..\Grammar\Expression.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace GillSoft.ExpressionEvaluator {
using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class ExpressionLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, STRING=3, SINGLE_QUOTED_STRING=4, DOUBLE_QUOTED_STRING=5, 
		CONST=6, INTEGER=7, DECIMAL=8, TRUE=9, FALSE=10, IDENT=11, LPAREN=12, 
		RPAREN=13, MULT=14, DIV=15, ADD=16, SUB=17, POW=18, AND=19, OR=20, WS=21;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "STRING", "SINGLE_QUOTED_STRING", "DOUBLE_QUOTED_STRING", 
		"CONST", "INTEGER", "DECIMAL", "TRUE", "FALSE", "IDENT", "LPAREN", "RPAREN", 
		"MULT", "DIV", "ADD", "SUB", "POW", "AND", "OR", "WS"
	};


	public ExpressionLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'!'", "','", null, null, null, null, null, null, null, null, null, 
		"'('", "')'", "'*'", "'/'", "'+'", "'-'", "'^'", "'&&'", "'||'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "STRING", "SINGLE_QUOTED_STRING", "DOUBLE_QUOTED_STRING", 
		"CONST", "INTEGER", "DECIMAL", "TRUE", "FALSE", "IDENT", "LPAREN", "RPAREN", 
		"MULT", "DIV", "ADD", "SUB", "POW", "AND", "OR", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Expression.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static ExpressionLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2\x17");
		sb.Append("\x88\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6");
		sb.Append("\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f");
		sb.Append("\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4");
		sb.Append("\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16");
		sb.Append("\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x5\x4\x34\n\x4\x3\x5\x3");
		sb.Append("\x5\a\x5\x38\n\x5\f\x5\xE\x5;\v\x5\x3\x5\x3\x5\x3\x6\x3\x6\a");
		sb.Append("\x6\x41\n\x6\f\x6\xE\x6\x44\v\x6\x3\x6\x3\x6\x3\a\x3\a\x5\a");
		sb.Append("J\n\a\x3\b\x6\bM\n\b\r\b\xE\bN\x3\t\x6\tR\n\t\r\t\xE\tS\x3\t");
		sb.Append("\x3\t\x6\tX\n\t\r\t\xE\tY\x3\n\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v");
		sb.Append("\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\a\fi\n\f\f\f\xE\fl\v\f\x3\r\x3");
		sb.Append("\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3\x12");
		sb.Append("\x3\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3");
		sb.Append("\x15\x3\x16\x6\x16\x83\n\x16\r\x16\xE\x16\x84\x3\x16\x3\x16");
		sb.Append("\x2\x2\x17\x3\x3\x5\x4\a\x5\t\x6\v\a\r\b\xF\t\x11\n\x13\v\x15");
		sb.Append("\f\x17\r\x19\xE\x1B\xF\x1D\x10\x1F\x11!\x12#\x13%\x14\'\x15");
		sb.Append(")\x16+\x17\x3\x2\x10\x5\x2\f\f\xF\xF))\x5\x2\f\f\xF\xF$$\x3");
		sb.Append("\x2\x32;\x4\x2VVvv\x4\x2TTtt\x4\x2WWww\x4\x2GGgg\x4\x2HHhh\x4");
		sb.Append("\x2\x43\x43\x63\x63\x4\x2NNnn\x4\x2UUuu\x6\x2%%\x43\\\x61\x61");
		sb.Append("\x63|\b\x2%%\x30\x30\x32;\x43\\\x61\x61\x63|\x5\x2\v\f\xE\xF");
		sb.Append("\"\"\x90\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2");
		sb.Append("\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3");
		sb.Append("\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2");
		sb.Append("\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2");
		sb.Append("\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2");
		sb.Append("#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2");
		sb.Append("\x2\x2+\x3\x2\x2\x2\x3-\x3\x2\x2\x2\x5/\x3\x2\x2\x2\a\x33\x3");
		sb.Append("\x2\x2\x2\t\x35\x3\x2\x2\x2\v>\x3\x2\x2\x2\rI\x3\x2\x2\x2\xF");
		sb.Append("L\x3\x2\x2\x2\x11Q\x3\x2\x2\x2\x13[\x3\x2\x2\x2\x15`\x3\x2\x2");
		sb.Append("\x2\x17\x66\x3\x2\x2\x2\x19m\x3\x2\x2\x2\x1Bo\x3\x2\x2\x2\x1D");
		sb.Append("q\x3\x2\x2\x2\x1Fs\x3\x2\x2\x2!u\x3\x2\x2\x2#w\x3\x2\x2\x2%");
		sb.Append("y\x3\x2\x2\x2\'{\x3\x2\x2\x2)~\x3\x2\x2\x2+\x82\x3\x2\x2\x2");
		sb.Append("-.\a#\x2\x2.\x4\x3\x2\x2\x2/\x30\a.\x2\x2\x30\x6\x3\x2\x2\x2");
		sb.Append("\x31\x34\x5\t\x5\x2\x32\x34\x5\v\x6\x2\x33\x31\x3\x2\x2\x2\x33");
		sb.Append("\x32\x3\x2\x2\x2\x34\b\x3\x2\x2\x2\x35\x39\a)\x2\x2\x36\x38");
		sb.Append("\n\x2\x2\x2\x37\x36\x3\x2\x2\x2\x38;\x3\x2\x2\x2\x39\x37\x3");
		sb.Append("\x2\x2\x2\x39:\x3\x2\x2\x2:<\x3\x2\x2\x2;\x39\x3\x2\x2\x2<=");
		sb.Append("\a)\x2\x2=\n\x3\x2\x2\x2>\x42\a$\x2\x2?\x41\n\x3\x2\x2@?\x3");
		sb.Append("\x2\x2\x2\x41\x44\x3\x2\x2\x2\x42@\x3\x2\x2\x2\x42\x43\x3\x2");
		sb.Append("\x2\x2\x43\x45\x3\x2\x2\x2\x44\x42\x3\x2\x2\x2\x45\x46\a$\x2");
		sb.Append("\x2\x46\f\x3\x2\x2\x2GJ\x5\xF\b\x2HJ\x5\x11\t\x2IG\x3\x2\x2");
		sb.Append("\x2IH\x3\x2\x2\x2J\xE\x3\x2\x2\x2KM\t\x4\x2\x2LK\x3\x2\x2\x2");
		sb.Append("MN\x3\x2\x2\x2NL\x3\x2\x2\x2NO\x3\x2\x2\x2O\x10\x3\x2\x2\x2");
		sb.Append("PR\t\x4\x2\x2QP\x3\x2\x2\x2RS\x3\x2\x2\x2SQ\x3\x2\x2\x2ST\x3");
		sb.Append("\x2\x2\x2TU\x3\x2\x2\x2UW\a\x30\x2\x2VX\t\x4\x2\x2WV\x3\x2\x2");
		sb.Append("\x2XY\x3\x2\x2\x2YW\x3\x2\x2\x2YZ\x3\x2\x2\x2Z\x12\x3\x2\x2");
		sb.Append("\x2[\\\t\x5\x2\x2\\]\t\x6\x2\x2]^\t\a\x2\x2^_\t\b\x2\x2_\x14");
		sb.Append("\x3\x2\x2\x2`\x61\t\t\x2\x2\x61\x62\t\n\x2\x2\x62\x63\t\v\x2");
		sb.Append("\x2\x63\x64\t\f\x2\x2\x64\x65\t\b\x2\x2\x65\x16\x3\x2\x2\x2");
		sb.Append("\x66j\t\r\x2\x2gi\t\xE\x2\x2hg\x3\x2\x2\x2il\x3\x2\x2\x2jh\x3");
		sb.Append("\x2\x2\x2jk\x3\x2\x2\x2k\x18\x3\x2\x2\x2lj\x3\x2\x2\x2mn\a*");
		sb.Append("\x2\x2n\x1A\x3\x2\x2\x2op\a+\x2\x2p\x1C\x3\x2\x2\x2qr\a,\x2");
		sb.Append("\x2r\x1E\x3\x2\x2\x2st\a\x31\x2\x2t \x3\x2\x2\x2uv\a-\x2\x2");
		sb.Append("v\"\x3\x2\x2\x2wx\a/\x2\x2x$\x3\x2\x2\x2yz\a`\x2\x2z&\x3\x2");
		sb.Append("\x2\x2{|\a(\x2\x2|}\a(\x2\x2}(\x3\x2\x2\x2~\x7F\a~\x2\x2\x7F");
		sb.Append("\x80\a~\x2\x2\x80*\x3\x2\x2\x2\x81\x83\t\xF\x2\x2\x82\x81\x3");
		sb.Append("\x2\x2\x2\x83\x84\x3\x2\x2\x2\x84\x82\x3\x2\x2\x2\x84\x85\x3");
		sb.Append("\x2\x2\x2\x85\x86\x3\x2\x2\x2\x86\x87\b\x16\x2\x2\x87,\x3\x2");
		sb.Append("\x2\x2\f\x2\x33\x39\x42INSYj\x84\x3\b\x2\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
} // namespace GillSoft.ExpressionEvaluator
