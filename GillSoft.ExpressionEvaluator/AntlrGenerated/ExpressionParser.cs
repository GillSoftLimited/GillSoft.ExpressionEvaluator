//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ..\Grammar\Expression.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace GillSoft.ExpressionEvaluator {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class ExpressionParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, SINGLE_QUOTED_STRING=2, DOUBLE_QUOTED_STRING=3, CONST=4, INTEGER=5, 
		DECIMAL=6, TRUE=7, FALSE=8, IDENT=9, LPAREN=10, RPAREN=11, MULT=12, DIV=13, 
		PLUS=14, MINUS=15, POW=16, AND=17, OR=18, NOT=19, WS=20;
	public const int
		RULE_expression = 0, RULE_mathematicalExpression = 1, RULE_booleanExprerssion = 2, 
		RULE_subExpression = 3, RULE_function = 4, RULE_stringValue = 5, RULE_simpleValue = 6;
	public static readonly string[] ruleNames = {
		"expression", "mathematicalExpression", "booleanExprerssion", "subExpression", 
		"function", "stringValue", "simpleValue"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", null, null, null, null, null, null, null, null, "'('", "')'", 
		"'*'", "'/'", "'+'", "'-'", "'^'", "'&&'", "'||'", "'!'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "SINGLE_QUOTED_STRING", "DOUBLE_QUOTED_STRING", "CONST", "INTEGER", 
		"DECIMAL", "TRUE", "FALSE", "IDENT", "LPAREN", "RPAREN", "MULT", "DIV", 
		"PLUS", "MINUS", "POW", "AND", "OR", "NOT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Expression.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static ExpressionParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

	public ExpressionParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ExpressionContext : ParserRuleContext {
		public MathematicalExpressionContext mathematicalExpression() {
			return GetRuleContext<MathematicalExpressionContext>(0);
		}
		public BooleanExprerssionContext booleanExprerssion() {
			return GetRuleContext<BooleanExprerssionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 0, RULE_expression);
		try {
			State = 16;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 14; mathematicalExpression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 15; booleanExprerssion(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MathematicalExpressionContext : ParserRuleContext {
		public MathematicalExpressionContext left;
		public IToken sign;
		public MathematicalExpressionContext expr;
		public FunctionContext functionValue;
		public StringValueContext str;
		public SimpleValueContext value;
		public IToken op;
		public MathematicalExpressionContext right;
		public MathematicalExpressionContext[] mathematicalExpression() {
			return GetRuleContexts<MathematicalExpressionContext>();
		}
		public MathematicalExpressionContext mathematicalExpression(int i) {
			return GetRuleContext<MathematicalExpressionContext>(i);
		}
		public ITerminalNode MINUS() { return GetToken(ExpressionParser.MINUS, 0); }
		public ITerminalNode PLUS() { return GetToken(ExpressionParser.PLUS, 0); }
		public SubExpressionContext subExpression() {
			return GetRuleContext<SubExpressionContext>(0);
		}
		public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public StringValueContext stringValue() {
			return GetRuleContext<StringValueContext>(0);
		}
		public SimpleValueContext simpleValue() {
			return GetRuleContext<SimpleValueContext>(0);
		}
		public ITerminalNode POW() { return GetToken(ExpressionParser.POW, 0); }
		public ITerminalNode MULT() { return GetToken(ExpressionParser.MULT, 0); }
		public ITerminalNode DIV() { return GetToken(ExpressionParser.DIV, 0); }
		public MathematicalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mathematicalExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMathematicalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MathematicalExpressionContext mathematicalExpression() {
		return mathematicalExpression(0);
	}

	private MathematicalExpressionContext mathematicalExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MathematicalExpressionContext _localctx = new MathematicalExpressionContext(Context, _parentState);
		MathematicalExpressionContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_mathematicalExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 25;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 19;
				_localctx.sign = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
					_localctx.sign = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 20; _localctx.expr = mathematicalExpression(8);
				}
				break;
			case 2:
				{
				State = 21; subExpression();
				}
				break;
			case 3:
				{
				State = 22; _localctx.functionValue = function();
				}
				break;
			case 4:
				{
				State = 23; _localctx.str = stringValue();
				}
				break;
			case 5:
				{
				State = 24; _localctx.value = simpleValue();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 38;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 36;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
					case 1:
						{
						_localctx = new MathematicalExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_mathematicalExpression);
						State = 27;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 28; _localctx.op = Match(POW);
						State = 29; _localctx.right = mathematicalExpression(7);
						}
						break;
					case 2:
						{
						_localctx = new MathematicalExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_mathematicalExpression);
						State = 30;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 31;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==MULT || _la==DIV) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 32; _localctx.right = mathematicalExpression(6);
						}
						break;
					case 3:
						{
						_localctx = new MathematicalExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_mathematicalExpression);
						State = 33;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 34;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 35; _localctx.right = mathematicalExpression(5);
						}
						break;
					}
					} 
				}
				State = 40;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BooleanExprerssionContext : ParserRuleContext {
		public BooleanExprerssionContext left;
		public IToken sign;
		public BooleanExprerssionContext expr;
		public FunctionContext functionValue;
		public StringValueContext str;
		public SimpleValueContext value;
		public IToken op;
		public BooleanExprerssionContext right;
		public ITerminalNode NOT() { return GetToken(ExpressionParser.NOT, 0); }
		public BooleanExprerssionContext[] booleanExprerssion() {
			return GetRuleContexts<BooleanExprerssionContext>();
		}
		public BooleanExprerssionContext booleanExprerssion(int i) {
			return GetRuleContext<BooleanExprerssionContext>(i);
		}
		public SubExpressionContext subExpression() {
			return GetRuleContext<SubExpressionContext>(0);
		}
		public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public StringValueContext stringValue() {
			return GetRuleContext<StringValueContext>(0);
		}
		public SimpleValueContext simpleValue() {
			return GetRuleContext<SimpleValueContext>(0);
		}
		public ITerminalNode AND() { return GetToken(ExpressionParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(ExpressionParser.OR, 0); }
		public BooleanExprerssionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanExprerssion; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanExprerssion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanExprerssionContext booleanExprerssion() {
		return booleanExprerssion(0);
	}

	private BooleanExprerssionContext booleanExprerssion(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BooleanExprerssionContext _localctx = new BooleanExprerssionContext(Context, _parentState);
		BooleanExprerssionContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_booleanExprerssion, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 42; _localctx.sign = Match(NOT);
				State = 43; _localctx.expr = booleanExprerssion(7);
				}
				break;
			case 2:
				{
				State = 44; subExpression();
				}
				break;
			case 3:
				{
				State = 45; _localctx.functionValue = function();
				}
				break;
			case 4:
				{
				State = 46; _localctx.str = stringValue();
				}
				break;
			case 5:
				{
				State = 47; _localctx.value = simpleValue();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 58;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 56;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
					case 1:
						{
						_localctx = new BooleanExprerssionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_booleanExprerssion);
						State = 50;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 51; _localctx.op = Match(AND);
						State = 52; _localctx.right = booleanExprerssion(6);
						}
						break;
					case 2:
						{
						_localctx = new BooleanExprerssionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_booleanExprerssion);
						State = 53;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 54; _localctx.op = Match(OR);
						State = 55; _localctx.right = booleanExprerssion(5);
						}
						break;
					}
					} 
				}
				State = 60;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SubExpressionContext : ParserRuleContext {
		public MathematicalExpressionContext mathExpr;
		public BooleanExprerssionContext boolExpr;
		public ITerminalNode LPAREN() { return GetToken(ExpressionParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(ExpressionParser.RPAREN, 0); }
		public MathematicalExpressionContext mathematicalExpression() {
			return GetRuleContext<MathematicalExpressionContext>(0);
		}
		public BooleanExprerssionContext booleanExprerssion() {
			return GetRuleContext<BooleanExprerssionContext>(0);
		}
		public SubExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubExpressionContext subExpression() {
		SubExpressionContext _localctx = new SubExpressionContext(Context, State);
		EnterRule(_localctx, 6, RULE_subExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61; Match(LPAREN);
			State = 64;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 62; _localctx.mathExpr = mathematicalExpression(0);
				}
				break;
			case 2:
				{
				State = 63; _localctx.boolExpr = booleanExprerssion(0);
				}
				break;
			}
			State = 66; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public IToken name;
		public ExpressionContext paramFirst;
		public ExpressionContext _expression;
		public IList<ExpressionContext> _paramRest = new List<ExpressionContext>();
		public ITerminalNode LPAREN() { return GetToken(ExpressionParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(ExpressionParser.RPAREN, 0); }
		public ITerminalNode IDENT() { return GetToken(ExpressionParser.IDENT, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 8, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68; _localctx.name = Match(IDENT);
			State = 69; Match(LPAREN);
			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SINGLE_QUOTED_STRING) | (1L << DOUBLE_QUOTED_STRING) | (1L << CONST) | (1L << TRUE) | (1L << FALSE) | (1L << IDENT) | (1L << LPAREN) | (1L << PLUS) | (1L << MINUS) | (1L << NOT))) != 0)) {
				{
				State = 70; _localctx.paramFirst = expression();
				State = 75;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__0) {
					{
					{
					State = 71; Match(T__0);
					State = 72; _localctx._expression = expression();
					_localctx._paramRest.Add(_localctx._expression);
					}
					}
					State = 77;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 80; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringValueContext : ParserRuleContext {
		public ITerminalNode SINGLE_QUOTED_STRING() { return GetToken(ExpressionParser.SINGLE_QUOTED_STRING, 0); }
		public ITerminalNode DOUBLE_QUOTED_STRING() { return GetToken(ExpressionParser.DOUBLE_QUOTED_STRING, 0); }
		public StringValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringValue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringValueContext stringValue() {
		StringValueContext _localctx = new StringValueContext(Context, State);
		EnterRule(_localctx, 10, RULE_stringValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			_la = TokenStream.LA(1);
			if ( !(_la==SINGLE_QUOTED_STRING || _la==DOUBLE_QUOTED_STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleValueContext : ParserRuleContext {
		public IToken value;
		public ITerminalNode IDENT() { return GetToken(ExpressionParser.IDENT, 0); }
		public ITerminalNode CONST() { return GetToken(ExpressionParser.CONST, 0); }
		public ITerminalNode TRUE() { return GetToken(ExpressionParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(ExpressionParser.FALSE, 0); }
		public SimpleValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleValue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleValueContext simpleValue() {
		SimpleValueContext _localctx = new SimpleValueContext(Context, State);
		EnterRule(_localctx, 12, RULE_simpleValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			_localctx.value = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONST) | (1L << TRUE) | (1L << FALSE) | (1L << IDENT))) != 0)) ) {
				_localctx.value = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return mathematicalExpression_sempred((MathematicalExpressionContext)_localctx, predIndex);
		case 2: return booleanExprerssion_sempred((BooleanExprerssionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool mathematicalExpression_sempred(MathematicalExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		}
		return true;
	}
	private bool booleanExprerssion_sempred(BooleanExprerssionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 4);
		}
		return true;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x16");
		sb.Append("Y\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4");
		sb.Append("\a\t\a\x4\b\t\b\x3\x2\x3\x2\x5\x2\x13\n\x2\x3\x3\x3\x3\x3\x3");
		sb.Append("\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\x1C\n\x3\x3\x3\x3\x3\x3\x3\x3");
		sb.Append("\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\a\x3\'\n\x3\f\x3\xE\x3*\v");
		sb.Append("\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\x33\n\x4");
		sb.Append("\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\a\x4;\n\x4\f\x4\xE\x4>");
		sb.Append("\v\x4\x3\x5\x3\x5\x3\x5\x5\x5\x43\n\x5\x3\x5\x3\x5\x3\x6\x3");
		sb.Append("\x6\x3\x6\x3\x6\x3\x6\a\x6L\n\x6\f\x6\xE\x6O\v\x6\x5\x6Q\n\x6");
		sb.Append("\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\b\x2\x4\x4\x6\t\x2\x4\x6");
		sb.Append("\b\n\f\xE\x2\x6\x3\x2\x10\x11\x3\x2\xE\xF\x3\x2\x4\x5\x4\x2");
		sb.Append("\x6\x6\t\v\x62\x2\x12\x3\x2\x2\x2\x4\x1B\x3\x2\x2\x2\x6\x32");
		sb.Append("\x3\x2\x2\x2\b?\x3\x2\x2\x2\n\x46\x3\x2\x2\x2\fT\x3\x2\x2\x2");
		sb.Append("\xEV\x3\x2\x2\x2\x10\x13\x5\x4\x3\x2\x11\x13\x5\x6\x4\x2\x12");
		sb.Append("\x10\x3\x2\x2\x2\x12\x11\x3\x2\x2\x2\x13\x3\x3\x2\x2\x2\x14");
		sb.Append("\x15\b\x3\x1\x2\x15\x16\t\x2\x2\x2\x16\x1C\x5\x4\x3\n\x17\x1C");
		sb.Append("\x5\b\x5\x2\x18\x1C\x5\n\x6\x2\x19\x1C\x5\f\a\x2\x1A\x1C\x5");
		sb.Append("\xE\b\x2\x1B\x14\x3\x2\x2\x2\x1B\x17\x3\x2\x2\x2\x1B\x18\x3");
		sb.Append("\x2\x2\x2\x1B\x19\x3\x2\x2\x2\x1B\x1A\x3\x2\x2\x2\x1C(\x3\x2");
		sb.Append("\x2\x2\x1D\x1E\f\b\x2\x2\x1E\x1F\a\x12\x2\x2\x1F\'\x5\x4\x3");
		sb.Append("\t !\f\a\x2\x2!\"\t\x3\x2\x2\"\'\x5\x4\x3\b#$\f\x6\x2\x2$%\t");
		sb.Append("\x2\x2\x2%\'\x5\x4\x3\a&\x1D\x3\x2\x2\x2& \x3\x2\x2\x2&#\x3");
		sb.Append("\x2\x2\x2\'*\x3\x2\x2\x2(&\x3\x2\x2\x2()\x3\x2\x2\x2)\x5\x3");
		sb.Append("\x2\x2\x2*(\x3\x2\x2\x2+,\b\x4\x1\x2,-\a\x15\x2\x2-\x33\x5\x6");
		sb.Append("\x4\t.\x33\x5\b\x5\x2/\x33\x5\n\x6\x2\x30\x33\x5\f\a\x2\x31");
		sb.Append("\x33\x5\xE\b\x2\x32+\x3\x2\x2\x2\x32.\x3\x2\x2\x2\x32/\x3\x2");
		sb.Append("\x2\x2\x32\x30\x3\x2\x2\x2\x32\x31\x3\x2\x2\x2\x33<\x3\x2\x2");
		sb.Append("\x2\x34\x35\f\a\x2\x2\x35\x36\a\x13\x2\x2\x36;\x5\x6\x4\b\x37");
		sb.Append("\x38\f\x6\x2\x2\x38\x39\a\x14\x2\x2\x39;\x5\x6\x4\a:\x34\x3");
		sb.Append("\x2\x2\x2:\x37\x3\x2\x2\x2;>\x3\x2\x2\x2<:\x3\x2\x2\x2<=\x3");
		sb.Append("\x2\x2\x2=\a\x3\x2\x2\x2><\x3\x2\x2\x2?\x42\a\f\x2\x2@\x43\x5");
		sb.Append("\x4\x3\x2\x41\x43\x5\x6\x4\x2\x42@\x3\x2\x2\x2\x42\x41\x3\x2");
		sb.Append("\x2\x2\x43\x44\x3\x2\x2\x2\x44\x45\a\r\x2\x2\x45\t\x3\x2\x2");
		sb.Append("\x2\x46G\a\v\x2\x2GP\a\f\x2\x2HM\x5\x2\x2\x2IJ\a\x3\x2\x2JL");
		sb.Append("\x5\x2\x2\x2KI\x3\x2\x2\x2LO\x3\x2\x2\x2MK\x3\x2\x2\x2MN\x3");
		sb.Append("\x2\x2\x2NQ\x3\x2\x2\x2OM\x3\x2\x2\x2PH\x3\x2\x2\x2PQ\x3\x2");
		sb.Append("\x2\x2QR\x3\x2\x2\x2RS\a\r\x2\x2S\v\x3\x2\x2\x2TU\t\x4\x2\x2");
		sb.Append("U\r\x3\x2\x2\x2VW\t\x5\x2\x2W\xF\x3\x2\x2\x2\f\x12\x1B&(\x32");
		sb.Append(":<\x42MP");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
} // namespace GillSoft.ExpressionEvaluator
