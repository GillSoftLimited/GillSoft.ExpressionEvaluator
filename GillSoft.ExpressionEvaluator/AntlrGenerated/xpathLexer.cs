//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ..\Grammar\xpath.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace GillSoft.ExpressionEvaluator {
using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class xpathLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		AXIS=1, IDENT=2, PATHSEP=3, LBRAC=4, RBRAC=5, AT=6, EQ=7, COLON=8, COLONCOLON=9, 
		STRING=10, Whitespace=11;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"AXIS", "HASH", "HYPHEN", "UNDERSCORE", "DIGIT", "LETTER", "NUMBER", "WORD", 
		"DOT", "IDENT", "PATHSEP", "LBRAC", "RBRAC", "AT", "EQ", "COLON", "COLONCOLON", 
		"STRING", "Whitespace"
	};


	public xpathLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, "'/'", "'['", "']'", "'@'", null, "':'", "'::'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "AXIS", "IDENT", "PATHSEP", "LBRAC", "RBRAC", "AT", "EQ", "COLON", 
		"COLONCOLON", "STRING", "Whitespace"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "xpath.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static xpathLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2\r\x103");
		sb.Append("\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12");
		sb.Append("\t\x12\x4\x13\t\x13\x4\x14\t\x14\x3\x2\x3\x2\x3\x2\x3\x2\x3");
		sb.Append("\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3");
		sb.Append("\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3");
		sb.Append("\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3");
		sb.Append("\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3");
		sb.Append("\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3");
		sb.Append("\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3");
		sb.Append("\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3");
		sb.Append("\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3");
		sb.Append("\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3");
		sb.Append("\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3");
		sb.Append("\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3");
		sb.Append("\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3");
		sb.Append("\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3");
		sb.Append("\x2\x3\x2\x3\x2\x5\x2\xB3\n\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5");
		sb.Append("\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b\x6\b\xC0\n\b\r\b\xE\b\xC1");
		sb.Append("\x3\t\x6\t\xC5\n\t\r\t\xE\t\xC6\x3\n\x3\n\x3\v\x3\v\x3\v\x3");
		sb.Append("\v\x3\v\x3\v\x3\v\a\v\xD2\n\v\f\v\xE\v\xD5\v\v\x5\v\xD7\n\v");
		sb.Append("\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3");
		sb.Append("\x10\x5\x10\xE4\n\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3");
		sb.Append("\x13\x3\x13\a\x13\xED\n\x13\f\x13\xE\x13\xF0\v\x13\x3\x13\x3");
		sb.Append("\x13\x3\x13\a\x13\xF5\n\x13\f\x13\xE\x13\xF8\v\x13\x3\x13\x5");
		sb.Append("\x13\xFB\n\x13\x3\x14\x6\x14\xFE\n\x14\r\x14\xE\x14\xFF\x3\x14");
		sb.Append("\x3\x14\x2\x2\x15\x3\x3\x5\x2\a\x2\t\x2\v\x2\r\x2\xF\x2\x11");
		sb.Append("\x2\x13\x2\x15\x4\x17\x5\x19\x6\x1B\a\x1D\b\x1F\t!\n#\v%\f\'");
		sb.Append("\r\x3\x2\x6\x4\x2\x43\\\x63|\x3\x2$$\x3\x2))\x5\x2\v\f\xF\xF");
		sb.Append("\"\"\x113\x2\x3\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2");
		sb.Append("\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2");
		sb.Append("\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3");
		sb.Append("\x2\x2\x2\x2\'\x3\x2\x2\x2\x3\xB2\x3\x2\x2\x2\x5\xB4\x3\x2\x2");
		sb.Append("\x2\a\xB6\x3\x2\x2\x2\t\xB8\x3\x2\x2\x2\v\xBA\x3\x2\x2\x2\r");
		sb.Append("\xBC\x3\x2\x2\x2\xF\xBF\x3\x2\x2\x2\x11\xC4\x3\x2\x2\x2\x13");
		sb.Append("\xC8\x3\x2\x2\x2\x15\xD6\x3\x2\x2\x2\x17\xD8\x3\x2\x2\x2\x19");
		sb.Append("\xDA\x3\x2\x2\x2\x1B\xDC\x3\x2\x2\x2\x1D\xDE\x3\x2\x2\x2\x1F");
		sb.Append("\xE3\x3\x2\x2\x2!\xE5\x3\x2\x2\x2#\xE7\x3\x2\x2\x2%\xFA\x3\x2");
		sb.Append("\x2\x2\'\xFD\x3\x2\x2\x2)*\a\x63\x2\x2*+\ap\x2\x2+,\a\x65\x2");
		sb.Append("\x2,-\ag\x2\x2-.\au\x2\x2./\av\x2\x2/\x30\aq\x2\x2\x30\xB3\a");
		sb.Append("t\x2\x2\x31\x32\a\x63\x2\x2\x32\x33\ap\x2\x2\x33\x34\a\x65\x2");
		sb.Append("\x2\x34\x35\ag\x2\x2\x35\x36\au\x2\x2\x36\x37\av\x2\x2\x37\x38");
		sb.Append("\aq\x2\x2\x38\x39\at\x2\x2\x39:\a/\x2\x2:;\aq\x2\x2;<\at\x2");
		sb.Append("\x2<=\a/\x2\x2=>\au\x2\x2>?\ag\x2\x2?@\an\x2\x2@\xB3\ah\x2\x2");
		sb.Append("\x41\x42\a\x63\x2\x2\x42\x43\av\x2\x2\x43\x44\av\x2\x2\x44\x45");
		sb.Append("\at\x2\x2\x45\x46\ak\x2\x2\x46G\a\x64\x2\x2GH\aw\x2\x2HI\av");
		sb.Append("\x2\x2I\xB3\ag\x2\x2JK\a\x65\x2\x2KL\aj\x2\x2LM\ak\x2\x2MN\a");
		sb.Append("n\x2\x2N\xB3\a\x66\x2\x2OP\a\x66\x2\x2PQ\ag\x2\x2QR\au\x2\x2");
		sb.Append("RS\a\x65\x2\x2ST\ag\x2\x2TU\ap\x2\x2UV\a\x66\x2\x2VW\a\x63\x2");
		sb.Append("\x2WX\ap\x2\x2X\xB3\av\x2\x2YZ\a\x66\x2\x2Z[\ag\x2\x2[\\\au");
		sb.Append("\x2\x2\\]\a\x65\x2\x2]^\ag\x2\x2^_\ap\x2\x2_`\a\x66\x2\x2`\x61");
		sb.Append("\a\x63\x2\x2\x61\x62\ap\x2\x2\x62\x63\av\x2\x2\x63\x64\a/\x2");
		sb.Append("\x2\x64\x65\aq\x2\x2\x65\x66\at\x2\x2\x66g\a/\x2\x2gh\au\x2");
		sb.Append("\x2hi\ag\x2\x2ij\an\x2\x2j\xB3\ah\x2\x2kl\ah\x2\x2lm\aq\x2\x2");
		sb.Append("mn\an\x2\x2no\an\x2\x2op\aq\x2\x2pq\ay\x2\x2qr\ak\x2\x2rs\a");
		sb.Append("p\x2\x2s\xB3\ai\x2\x2tu\ah\x2\x2uv\aq\x2\x2vw\an\x2\x2wx\an");
		sb.Append("\x2\x2xy\aq\x2\x2yz\ay\x2\x2z{\ak\x2\x2{|\ap\x2\x2|}\ai\x2\x2");
		sb.Append("}~\a/\x2\x2~\x7F\au\x2\x2\x7F\x80\ak\x2\x2\x80\x81\a\x64\x2");
		sb.Append("\x2\x81\x82\an\x2\x2\x82\x83\ak\x2\x2\x83\x84\ap\x2\x2\x84\xB3");
		sb.Append("\ai\x2\x2\x85\x86\ap\x2\x2\x86\x87\a\x63\x2\x2\x87\x88\ao\x2");
		sb.Append("\x2\x88\x89\ag\x2\x2\x89\x8A\au\x2\x2\x8A\x8B\ar\x2\x2\x8B\x8C");
		sb.Append("\a\x63\x2\x2\x8C\x8D\a\x65\x2\x2\x8D\xB3\ag\x2\x2\x8E\x8F\a");
		sb.Append("r\x2\x2\x8F\x90\a\x63\x2\x2\x90\x91\at\x2\x2\x91\x92\ag\x2\x2");
		sb.Append("\x92\x93\ap\x2\x2\x93\xB3\av\x2\x2\x94\x95\ar\x2\x2\x95\x96");
		sb.Append("\at\x2\x2\x96\x97\ag\x2\x2\x97\x98\a\x65\x2\x2\x98\x99\ag\x2");
		sb.Append("\x2\x99\x9A\a\x66\x2\x2\x9A\x9B\ak\x2\x2\x9B\x9C\ap\x2\x2\x9C");
		sb.Append("\xB3\ai\x2\x2\x9D\x9E\ar\x2\x2\x9E\x9F\at\x2\x2\x9F\xA0\ag\x2");
		sb.Append("\x2\xA0\xA1\a\x65\x2\x2\xA1\xA2\ag\x2\x2\xA2\xA3\a\x66\x2\x2");
		sb.Append("\xA3\xA4\ak\x2\x2\xA4\xA5\ap\x2\x2\xA5\xA6\ai\x2\x2\xA6\xA7");
		sb.Append("\a/\x2\x2\xA7\xA8\au\x2\x2\xA8\xA9\ak\x2\x2\xA9\xAA\a\x64\x2");
		sb.Append("\x2\xAA\xAB\an\x2\x2\xAB\xAC\ak\x2\x2\xAC\xAD\ap\x2\x2\xAD\xB3");
		sb.Append("\ai\x2\x2\xAE\xAF\au\x2\x2\xAF\xB0\ag\x2\x2\xB0\xB1\an\x2\x2");
		sb.Append("\xB1\xB3\ah\x2\x2\xB2)\x3\x2\x2\x2\xB2\x31\x3\x2\x2\x2\xB2\x41");
		sb.Append("\x3\x2\x2\x2\xB2J\x3\x2\x2\x2\xB2O\x3\x2\x2\x2\xB2Y\x3\x2\x2");
		sb.Append("\x2\xB2k\x3\x2\x2\x2\xB2t\x3\x2\x2\x2\xB2\x85\x3\x2\x2\x2\xB2");
		sb.Append("\x8E\x3\x2\x2\x2\xB2\x94\x3\x2\x2\x2\xB2\x9D\x3\x2\x2\x2\xB2");
		sb.Append("\xAE\x3\x2\x2\x2\xB3\x4\x3\x2\x2\x2\xB4\xB5\a%\x2\x2\xB5\x6");
		sb.Append("\x3\x2\x2\x2\xB6\xB7\a/\x2\x2\xB7\b\x3\x2\x2\x2\xB8\xB9\a\x61");
		sb.Append("\x2\x2\xB9\n\x3\x2\x2\x2\xBA\xBB\x4\x32;\x2\xBB\f\x3\x2\x2\x2");
		sb.Append("\xBC\xBD\t\x2\x2\x2\xBD\xE\x3\x2\x2\x2\xBE\xC0\x5\v\x6\x2\xBF");
		sb.Append("\xBE\x3\x2\x2\x2\xC0\xC1\x3\x2\x2\x2\xC1\xBF\x3\x2\x2\x2\xC1");
		sb.Append("\xC2\x3\x2\x2\x2\xC2\x10\x3\x2\x2\x2\xC3\xC5\x5\r\a\x2\xC4\xC3");
		sb.Append("\x3\x2\x2\x2\xC5\xC6\x3\x2\x2\x2\xC6\xC4\x3\x2\x2\x2\xC6\xC7");
		sb.Append("\x3\x2\x2\x2\xC7\x12\x3\x2\x2\x2\xC8\xC9\a\x30\x2\x2\xC9\x14");
		sb.Append("\x3\x2\x2\x2\xCA\xD7\x5\x5\x3\x2\xCB\xD3\x5\r\a\x2\xCC\xD2\x5");
		sb.Append("\r\a\x2\xCD\xD2\x5\v\x6\x2\xCE\xD2\x5\a\x4\x2\xCF\xD2\x5\t\x5");
		sb.Append("\x2\xD0\xD2\x5\x13\n\x2\xD1\xCC\x3\x2\x2\x2\xD1\xCD\x3\x2\x2");
		sb.Append("\x2\xD1\xCE\x3\x2\x2\x2\xD1\xCF\x3\x2\x2\x2\xD1\xD0\x3\x2\x2");
		sb.Append("\x2\xD2\xD5\x3\x2\x2\x2\xD3\xD1\x3\x2\x2\x2\xD3\xD4\x3\x2\x2");
		sb.Append("\x2\xD4\xD7\x3\x2\x2\x2\xD5\xD3\x3\x2\x2\x2\xD6\xCA\x3\x2\x2");
		sb.Append("\x2\xD6\xCB\x3\x2\x2\x2\xD7\x16\x3\x2\x2\x2\xD8\xD9\a\x31\x2");
		sb.Append("\x2\xD9\x18\x3\x2\x2\x2\xDA\xDB\a]\x2\x2\xDB\x1A\x3\x2\x2\x2");
		sb.Append("\xDC\xDD\a_\x2\x2\xDD\x1C\x3\x2\x2\x2\xDE\xDF\a\x42\x2\x2\xDF");
		sb.Append("\x1E\x3\x2\x2\x2\xE0\xE1\a?\x2\x2\xE1\xE4\a?\x2\x2\xE2\xE4\a");
		sb.Append("?\x2\x2\xE3\xE0\x3\x2\x2\x2\xE3\xE2\x3\x2\x2\x2\xE4 \x3\x2\x2");
		sb.Append("\x2\xE5\xE6\a<\x2\x2\xE6\"\x3\x2\x2\x2\xE7\xE8\a<\x2\x2\xE8");
		sb.Append("\xE9\a<\x2\x2\xE9$\x3\x2\x2\x2\xEA\xEE\a$\x2\x2\xEB\xED\n\x3");
		sb.Append("\x2\x2\xEC\xEB\x3\x2\x2\x2\xED\xF0\x3\x2\x2\x2\xEE\xEC\x3\x2");
		sb.Append("\x2\x2\xEE\xEF\x3\x2\x2\x2\xEF\xF1\x3\x2\x2\x2\xF0\xEE\x3\x2");
		sb.Append("\x2\x2\xF1\xFB\a$\x2\x2\xF2\xF6\a)\x2\x2\xF3\xF5\n\x4\x2\x2");
		sb.Append("\xF4\xF3\x3\x2\x2\x2\xF5\xF8\x3\x2\x2\x2\xF6\xF4\x3\x2\x2\x2");
		sb.Append("\xF6\xF7\x3\x2\x2\x2\xF7\xF9\x3\x2\x2\x2\xF8\xF6\x3\x2\x2\x2");
		sb.Append("\xF9\xFB\a)\x2\x2\xFA\xEA\x3\x2\x2\x2\xFA\xF2\x3\x2\x2\x2\xFB");
		sb.Append("&\x3\x2\x2\x2\xFC\xFE\t\x5\x2\x2\xFD\xFC\x3\x2\x2\x2\xFE\xFF");
		sb.Append("\x3\x2\x2\x2\xFF\xFD\x3\x2\x2\x2\xFF\x100\x3\x2\x2\x2\x100\x101");
		sb.Append("\x3\x2\x2\x2\x101\x102\b\x14\x2\x2\x102(\x3\x2\x2\x2\xE\x2\xB2");
		sb.Append("\xC1\xC6\xD1\xD3\xD6\xE3\xEE\xF6\xFA\xFF\x3\b\x2\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
} // namespace GillSoft.ExpressionEvaluator
