//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ..\Grammar\xpath.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace GillSoft.ExpressionEvaluator {
using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class xpathLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		FUNCTION=1, DOUBLE_COLON=2, INTEGER=3, DECIMAL=4, IDENT=5, PATHSEP=6, 
		ABRPATH=7, LPAR=8, RPAR=9, LBRAC=10, RBRAC=11, MINUS=12, PLUS=13, DOT=14, 
		MUL=15, DOTDOT=16, AT=17, COMMA=18, PIPE=19, LESS=20, MORE_=21, EQ=22, 
		LE=23, GE=24, COLON=25, CC=26, APOS=27, QUOT=28, STRING=29, Whitespace=30;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"FUNCTION", "DOUBLE_COLON", "INTEGER", "DECIMAL", "HASH", "HYPHEN", "UNDERSCORE", 
		"DIGIT", "LETTER", "NUMBER", "WORD", "IDENT", "PATHSEP", "ABRPATH", "LPAR", 
		"RPAR", "LBRAC", "RBRAC", "MINUS", "PLUS", "DOT", "MUL", "DOTDOT", "AT", 
		"COMMA", "PIPE", "LESS", "MORE_", "EQ", "LE", "GE", "COLON", "CC", "APOS", 
		"QUOT", "STRING", "Whitespace"
	};


	public xpathLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'/'", "'//'", "'('", "')'", "'['", 
		"']'", "'-'", "'+'", "'.'", "'*'", "'..'", "'@'", "','", "'|'", "'<'", 
		"'>'", null, "'<='", "'>='", "':'", null, "'''", "'\"'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "FUNCTION", "DOUBLE_COLON", "INTEGER", "DECIMAL", "IDENT", "PATHSEP", 
		"ABRPATH", "LPAR", "RPAR", "LBRAC", "RBRAC", "MINUS", "PLUS", "DOT", "MUL", 
		"DOTDOT", "AT", "COMMA", "PIPE", "LESS", "MORE_", "EQ", "LE", "GE", "COLON", 
		"CC", "APOS", "QUOT", "STRING", "Whitespace"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "xpath.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static xpathLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2 \x15B");
		sb.Append("\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12");
		sb.Append("\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16\x4");
		sb.Append("\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B\t\x1B");
		sb.Append("\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t ");
		sb.Append("\x4!\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x3\x2\x3\x2\x3");
		sb.Append("\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3");
		sb.Append("\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3");
		sb.Append("\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3");
		sb.Append("\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3");
		sb.Append("\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3");
		sb.Append("\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3");
		sb.Append("\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3");
		sb.Append("\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3");
		sb.Append("\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3");
		sb.Append("\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3");
		sb.Append("\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3");
		sb.Append("\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3");
		sb.Append("\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3");
		sb.Append("\x2\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2\xD7\n\x2\x3\x3\x3\x3\x3\x3");
		sb.Append("\x3\x4\x6\x4\xDD\n\x4\r\x4\xE\x4\xDE\x3\x5\x6\x5\xE2\n\x5\r");
		sb.Append("\x5\xE\x5\xE3\x3\x5\x3\x5\x6\x5\xE8\n\x5\r\x5\xE\x5\xE9\x3\x6");
		sb.Append("\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3\v\x6\v\xF7");
		sb.Append("\n\v\r\v\xE\v\xF8\x3\f\x6\f\xFC\n\f\r\f\xE\f\xFD\x3\r\x3\r\x3");
		sb.Append("\r\x3\r\x3\r\x3\r\a\r\x106\n\r\f\r\xE\r\x109\v\r\x5\r\x10B\n");
		sb.Append("\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x11\x3\x11");
		sb.Append("\x3\x12\x3\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x15\x3\x15\x3");
		sb.Append("\x16\x3\x16\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\x3\x19\x3\x19");
		sb.Append("\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3");
		sb.Append("\x1E\x3\x1E\x3\x1E\x5\x1E\x132\n\x1E\x3\x1F\x3\x1F\x3\x1F\x3");
		sb.Append(" \x3 \x3 \x3!\x3!\x3\"\x3\"\x3\"\x3#\x3#\x3$\x3$\x3%\x3%\a%");
		sb.Append("\x145\n%\f%\xE%\x148\v%\x3%\x3%\x3%\a%\x14D\n%\f%\xE%\x150\v");
		sb.Append("%\x3%\x5%\x153\n%\x3&\x6&\x156\n&\r&\xE&\x157\x3&\x3&\x2\x2");
		sb.Append("\'\x3\x3\x5\x4\a\x5\t\x6\v\x2\r\x2\xF\x2\x11\x2\x13\x2\x15\x2");
		sb.Append("\x17\x2\x19\a\x1B\b\x1D\t\x1F\n!\v#\f%\r\'\xE)\xF+\x10-\x11");
		sb.Append("/\x12\x31\x13\x33\x14\x35\x15\x37\x16\x39\x17;\x18=\x19?\x1A");
		sb.Append("\x41\x1B\x43\x1C\x45\x1DG\x1EI\x1FK \x3\x2\a\x3\x2\x32;\x4\x2");
		sb.Append("\x43\\\x63|\x3\x2$$\x3\x2))\x5\x2\v\f\xF\xF\"\"\x16E\x2\x3\x3");
		sb.Append("\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2");
		sb.Append("\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2");
		sb.Append("\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2");
		sb.Append("\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x2+\x3\x2\x2\x2\x2-\x3");
		sb.Append("\x2\x2\x2\x2/\x3\x2\x2\x2\x2\x31\x3\x2\x2\x2\x2\x33\x3\x2\x2");
		sb.Append("\x2\x2\x35\x3\x2\x2\x2\x2\x37\x3\x2\x2\x2\x2\x39\x3\x2\x2\x2");
		sb.Append("\x2;\x3\x2\x2\x2\x2=\x3\x2\x2\x2\x2?\x3\x2\x2\x2\x2\x41\x3\x2");
		sb.Append("\x2\x2\x2\x43\x3\x2\x2\x2\x2\x45\x3\x2\x2\x2\x2G\x3\x2\x2\x2");
		sb.Append("\x2I\x3\x2\x2\x2\x2K\x3\x2\x2\x2\x3\xD6\x3\x2\x2\x2\x5\xD8\x3");
		sb.Append("\x2\x2\x2\a\xDC\x3\x2\x2\x2\t\xE1\x3\x2\x2\x2\v\xEB\x3\x2\x2");
		sb.Append("\x2\r\xED\x3\x2\x2\x2\xF\xEF\x3\x2\x2\x2\x11\xF1\x3\x2\x2\x2");
		sb.Append("\x13\xF3\x3\x2\x2\x2\x15\xF6\x3\x2\x2\x2\x17\xFB\x3\x2\x2\x2");
		sb.Append("\x19\x10A\x3\x2\x2\x2\x1B\x10C\x3\x2\x2\x2\x1D\x10E\x3\x2\x2");
		sb.Append("\x2\x1F\x111\x3\x2\x2\x2!\x113\x3\x2\x2\x2#\x115\x3\x2\x2\x2");
		sb.Append("%\x117\x3\x2\x2\x2\'\x119\x3\x2\x2\x2)\x11B\x3\x2\x2\x2+\x11D");
		sb.Append("\x3\x2\x2\x2-\x11F\x3\x2\x2\x2/\x121\x3\x2\x2\x2\x31\x124\x3");
		sb.Append("\x2\x2\x2\x33\x126\x3\x2\x2\x2\x35\x128\x3\x2\x2\x2\x37\x12A");
		sb.Append("\x3\x2\x2\x2\x39\x12C\x3\x2\x2\x2;\x131\x3\x2\x2\x2=\x133\x3");
		sb.Append("\x2\x2\x2?\x136\x3\x2\x2\x2\x41\x139\x3\x2\x2\x2\x43\x13B\x3");
		sb.Append("\x2\x2\x2\x45\x13E\x3\x2\x2\x2G\x140\x3\x2\x2\x2I\x152\x3\x2");
		sb.Append("\x2\x2K\x155\x3\x2\x2\x2MN\a\x63\x2\x2NO\ap\x2\x2OP\a\x65\x2");
		sb.Append("\x2PQ\ag\x2\x2QR\au\x2\x2RS\av\x2\x2ST\aq\x2\x2T\xD7\at\x2\x2");
		sb.Append("UV\a\x63\x2\x2VW\ap\x2\x2WX\a\x65\x2\x2XY\ag\x2\x2YZ\au\x2\x2");
		sb.Append("Z[\av\x2\x2[\\\aq\x2\x2\\]\at\x2\x2]^\a/\x2\x2^_\aq\x2\x2_`");
		sb.Append("\at\x2\x2`\x61\a/\x2\x2\x61\x62\au\x2\x2\x62\x63\ag\x2\x2\x63");
		sb.Append("\x64\an\x2\x2\x64\xD7\ah\x2\x2\x65\x66\a\x63\x2\x2\x66g\av\x2");
		sb.Append("\x2gh\av\x2\x2hi\at\x2\x2ij\ak\x2\x2jk\a\x64\x2\x2kl\aw\x2\x2");
		sb.Append("lm\av\x2\x2m\xD7\ag\x2\x2no\a\x65\x2\x2op\aj\x2\x2pq\ak\x2\x2");
		sb.Append("qr\an\x2\x2r\xD7\a\x66\x2\x2st\a\x66\x2\x2tu\ag\x2\x2uv\au\x2");
		sb.Append("\x2vw\a\x65\x2\x2wx\ag\x2\x2xy\ap\x2\x2yz\a\x66\x2\x2z{\a\x63");
		sb.Append("\x2\x2{|\ap\x2\x2|\xD7\av\x2\x2}~\a\x66\x2\x2~\x7F\ag\x2\x2");
		sb.Append("\x7F\x80\au\x2\x2\x80\x81\a\x65\x2\x2\x81\x82\ag\x2\x2\x82\x83");
		sb.Append("\ap\x2\x2\x83\x84\a\x66\x2\x2\x84\x85\a\x63\x2\x2\x85\x86\a");
		sb.Append("p\x2\x2\x86\x87\av\x2\x2\x87\x88\a/\x2\x2\x88\x89\aq\x2\x2\x89");
		sb.Append("\x8A\at\x2\x2\x8A\x8B\a/\x2\x2\x8B\x8C\au\x2\x2\x8C\x8D\ag\x2");
		sb.Append("\x2\x8D\x8E\an\x2\x2\x8E\xD7\ah\x2\x2\x8F\x90\ah\x2\x2\x90\x91");
		sb.Append("\aq\x2\x2\x91\x92\an\x2\x2\x92\x93\an\x2\x2\x93\x94\aq\x2\x2");
		sb.Append("\x94\x95\ay\x2\x2\x95\x96\ak\x2\x2\x96\x97\ap\x2\x2\x97\xD7");
		sb.Append("\ai\x2\x2\x98\x99\ah\x2\x2\x99\x9A\aq\x2\x2\x9A\x9B\an\x2\x2");
		sb.Append("\x9B\x9C\an\x2\x2\x9C\x9D\aq\x2\x2\x9D\x9E\ay\x2\x2\x9E\x9F");
		sb.Append("\ak\x2\x2\x9F\xA0\ap\x2\x2\xA0\xA1\ai\x2\x2\xA1\xA2\a/\x2\x2");
		sb.Append("\xA2\xA3\au\x2\x2\xA3\xA4\ak\x2\x2\xA4\xA5\a\x64\x2\x2\xA5\xA6");
		sb.Append("\an\x2\x2\xA6\xA7\ak\x2\x2\xA7\xA8\ap\x2\x2\xA8\xD7\ai\x2\x2");
		sb.Append("\xA9\xAA\ap\x2\x2\xAA\xAB\a\x63\x2\x2\xAB\xAC\ao\x2\x2\xAC\xAD");
		sb.Append("\ag\x2\x2\xAD\xAE\au\x2\x2\xAE\xAF\ar\x2\x2\xAF\xB0\a\x63\x2");
		sb.Append("\x2\xB0\xB1\a\x65\x2\x2\xB1\xD7\ag\x2\x2\xB2\xB3\ar\x2\x2\xB3");
		sb.Append("\xB4\a\x63\x2\x2\xB4\xB5\at\x2\x2\xB5\xB6\ag\x2\x2\xB6\xB7\a");
		sb.Append("p\x2\x2\xB7\xD7\av\x2\x2\xB8\xB9\ar\x2\x2\xB9\xBA\at\x2\x2\xBA");
		sb.Append("\xBB\ag\x2\x2\xBB\xBC\a\x65\x2\x2\xBC\xBD\ag\x2\x2\xBD\xBE\a");
		sb.Append("\x66\x2\x2\xBE\xBF\ak\x2\x2\xBF\xC0\ap\x2\x2\xC0\xD7\ai\x2\x2");
		sb.Append("\xC1\xC2\ar\x2\x2\xC2\xC3\at\x2\x2\xC3\xC4\ag\x2\x2\xC4\xC5");
		sb.Append("\a\x65\x2\x2\xC5\xC6\ag\x2\x2\xC6\xC7\a\x66\x2\x2\xC7\xC8\a");
		sb.Append("k\x2\x2\xC8\xC9\ap\x2\x2\xC9\xCA\ai\x2\x2\xCA\xCB\a/\x2\x2\xCB");
		sb.Append("\xCC\au\x2\x2\xCC\xCD\ak\x2\x2\xCD\xCE\a\x64\x2\x2\xCE\xCF\a");
		sb.Append("n\x2\x2\xCF\xD0\ak\x2\x2\xD0\xD1\ap\x2\x2\xD1\xD7\ai\x2\x2\xD2");
		sb.Append("\xD3\au\x2\x2\xD3\xD4\ag\x2\x2\xD4\xD5\an\x2\x2\xD5\xD7\ah\x2");
		sb.Append("\x2\xD6M\x3\x2\x2\x2\xD6U\x3\x2\x2\x2\xD6\x65\x3\x2\x2\x2\xD6");
		sb.Append("n\x3\x2\x2\x2\xD6s\x3\x2\x2\x2\xD6}\x3\x2\x2\x2\xD6\x8F\x3\x2");
		sb.Append("\x2\x2\xD6\x98\x3\x2\x2\x2\xD6\xA9\x3\x2\x2\x2\xD6\xB2\x3\x2");
		sb.Append("\x2\x2\xD6\xB8\x3\x2\x2\x2\xD6\xC1\x3\x2\x2\x2\xD6\xD2\x3\x2");
		sb.Append("\x2\x2\xD7\x4\x3\x2\x2\x2\xD8\xD9\a<\x2\x2\xD9\xDA\a<\x2\x2");
		sb.Append("\xDA\x6\x3\x2\x2\x2\xDB\xDD\t\x2\x2\x2\xDC\xDB\x3\x2\x2\x2\xDD");
		sb.Append("\xDE\x3\x2\x2\x2\xDE\xDC\x3\x2\x2\x2\xDE\xDF\x3\x2\x2\x2\xDF");
		sb.Append("\b\x3\x2\x2\x2\xE0\xE2\t\x2\x2\x2\xE1\xE0\x3\x2\x2\x2\xE2\xE3");
		sb.Append("\x3\x2\x2\x2\xE3\xE1\x3\x2\x2\x2\xE3\xE4\x3\x2\x2\x2\xE4\xE5");
		sb.Append("\x3\x2\x2\x2\xE5\xE7\a\x30\x2\x2\xE6\xE8\t\x2\x2\x2\xE7\xE6");
		sb.Append("\x3\x2\x2\x2\xE8\xE9\x3\x2\x2\x2\xE9\xE7\x3\x2\x2\x2\xE9\xEA");
		sb.Append("\x3\x2\x2\x2\xEA\n\x3\x2\x2\x2\xEB\xEC\a%\x2\x2\xEC\f\x3\x2");
		sb.Append("\x2\x2\xED\xEE\a/\x2\x2\xEE\xE\x3\x2\x2\x2\xEF\xF0\a\x61\x2");
		sb.Append("\x2\xF0\x10\x3\x2\x2\x2\xF1\xF2\x4\x32;\x2\xF2\x12\x3\x2\x2");
		sb.Append("\x2\xF3\xF4\t\x3\x2\x2\xF4\x14\x3\x2\x2\x2\xF5\xF7\x5\x11\t");
		sb.Append("\x2\xF6\xF5\x3\x2\x2\x2\xF7\xF8\x3\x2\x2\x2\xF8\xF6\x3\x2\x2");
		sb.Append("\x2\xF8\xF9\x3\x2\x2\x2\xF9\x16\x3\x2\x2\x2\xFA\xFC\x5\x13\n");
		sb.Append("\x2\xFB\xFA\x3\x2\x2\x2\xFC\xFD\x3\x2\x2\x2\xFD\xFB\x3\x2\x2");
		sb.Append("\x2\xFD\xFE\x3\x2\x2\x2\xFE\x18\x3\x2\x2\x2\xFF\x10B\x5\v\x6");
		sb.Append("\x2\x100\x107\x5\x13\n\x2\x101\x106\x5\x13\n\x2\x102\x106\x5");
		sb.Append("\x11\t\x2\x103\x106\x5\r\a\x2\x104\x106\x5\xF\b\x2\x105\x101");
		sb.Append("\x3\x2\x2\x2\x105\x102\x3\x2\x2\x2\x105\x103\x3\x2\x2\x2\x105");
		sb.Append("\x104\x3\x2\x2\x2\x106\x109\x3\x2\x2\x2\x107\x105\x3\x2\x2\x2");
		sb.Append("\x107\x108\x3\x2\x2\x2\x108\x10B\x3\x2\x2\x2\x109\x107\x3\x2");
		sb.Append("\x2\x2\x10A\xFF\x3\x2\x2\x2\x10A\x100\x3\x2\x2\x2\x10B\x1A\x3");
		sb.Append("\x2\x2\x2\x10C\x10D\a\x31\x2\x2\x10D\x1C\x3\x2\x2\x2\x10E\x10F");
		sb.Append("\a\x31\x2\x2\x10F\x110\a\x31\x2\x2\x110\x1E\x3\x2\x2\x2\x111");
		sb.Append("\x112\a*\x2\x2\x112 \x3\x2\x2\x2\x113\x114\a+\x2\x2\x114\"\x3");
		sb.Append("\x2\x2\x2\x115\x116\a]\x2\x2\x116$\x3\x2\x2\x2\x117\x118\a_");
		sb.Append("\x2\x2\x118&\x3\x2\x2\x2\x119\x11A\a/\x2\x2\x11A(\x3\x2\x2\x2");
		sb.Append("\x11B\x11C\a-\x2\x2\x11C*\x3\x2\x2\x2\x11D\x11E\a\x30\x2\x2");
		sb.Append("\x11E,\x3\x2\x2\x2\x11F\x120\a,\x2\x2\x120.\x3\x2\x2\x2\x121");
		sb.Append("\x122\a\x30\x2\x2\x122\x123\a\x30\x2\x2\x123\x30\x3\x2\x2\x2");
		sb.Append("\x124\x125\a\x42\x2\x2\x125\x32\x3\x2\x2\x2\x126\x127\a.\x2");
		sb.Append("\x2\x127\x34\x3\x2\x2\x2\x128\x129\a~\x2\x2\x129\x36\x3\x2\x2");
		sb.Append("\x2\x12A\x12B\a>\x2\x2\x12B\x38\x3\x2\x2\x2\x12C\x12D\a@\x2");
		sb.Append("\x2\x12D:\x3\x2\x2\x2\x12E\x12F\a?\x2\x2\x12F\x132\a?\x2\x2");
		sb.Append("\x130\x132\a?\x2\x2\x131\x12E\x3\x2\x2\x2\x131\x130\x3\x2\x2");
		sb.Append("\x2\x132<\x3\x2\x2\x2\x133\x134\a>\x2\x2\x134\x135\a?\x2\x2");
		sb.Append("\x135>\x3\x2\x2\x2\x136\x137\a@\x2\x2\x137\x138\a?\x2\x2\x138");
		sb.Append("@\x3\x2\x2\x2\x139\x13A\a<\x2\x2\x13A\x42\x3\x2\x2\x2\x13B\x13C");
		sb.Append("\a<\x2\x2\x13C\x13D\a<\x2\x2\x13D\x44\x3\x2\x2\x2\x13E\x13F");
		sb.Append("\a)\x2\x2\x13F\x46\x3\x2\x2\x2\x140\x141\a$\x2\x2\x141H\x3\x2");
		sb.Append("\x2\x2\x142\x146\a$\x2\x2\x143\x145\n\x4\x2\x2\x144\x143\x3");
		sb.Append("\x2\x2\x2\x145\x148\x3\x2\x2\x2\x146\x144\x3\x2\x2\x2\x146\x147");
		sb.Append("\x3\x2\x2\x2\x147\x149\x3\x2\x2\x2\x148\x146\x3\x2\x2\x2\x149");
		sb.Append("\x153\a$\x2\x2\x14A\x14E\a)\x2\x2\x14B\x14D\n\x5\x2\x2\x14C");
		sb.Append("\x14B\x3\x2\x2\x2\x14D\x150\x3\x2\x2\x2\x14E\x14C\x3\x2\x2\x2");
		sb.Append("\x14E\x14F\x3\x2\x2\x2\x14F\x151\x3\x2\x2\x2\x150\x14E\x3\x2");
		sb.Append("\x2\x2\x151\x153\a)\x2\x2\x152\x142\x3\x2\x2\x2\x152\x14A\x3");
		sb.Append("\x2\x2\x2\x153J\x3\x2\x2\x2\x154\x156\t\x6\x2\x2\x155\x154\x3");
		sb.Append("\x2\x2\x2\x156\x157\x3\x2\x2\x2\x157\x155\x3\x2\x2\x2\x157\x158");
		sb.Append("\x3\x2\x2\x2\x158\x159\x3\x2\x2\x2\x159\x15A\b&\x2\x2\x15AL");
		sb.Append("\x3\x2\x2\x2\x11\x2\xD6\xDE\xE3\xE9\xF8\xFD\x105\x107\x10A\x131");
		sb.Append("\x146\x14E\x152\x157\x3\b\x2\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
} // namespace GillSoft.ExpressionEvaluator
